name: Junrai Karaoke CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: junraikaraokedatabase_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd app
        npm ci

    - name: Install test dependencies
      run: |
        cd app/tests
        npm ci

    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h 127.0.0.1 -P 3306 -u root -proot --silent; do
          sleep 1
        done

    - name: Setup test database
      run: |
        mysql -h 127.0.0.1 -P 3306 -u root -proot < app/junraikaraokedatabase.sql
        mysql -h 127.0.0.1 -P 3306 -u root -proot < app/migrations/001_admin_security_performance.sql
      env:
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_USER: root
        DB_PASSWORD: root
        DB_NAME: junraikaraokedatabase_test

    - name: Run ESLint
      run: |
        cd app
        npm run lint

    - name: Run tests
      run: |
        cd app/tests
        npm test
      env:
        NODE_ENV: test
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_USER: root
        DB_PASSWORD: root
        DB_NAME: junraikaraokedatabase_test
        JWT_SECRET: test_secret_key_for_ci

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./app/tests/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        
    - name: Install dependencies
      run: |
        cd app
        npm ci
        
    - name: Run security audit
      run: |
        cd app
        npm audit --audit-level moderate
        
    - name: Check for vulnerabilities
      run: |
        cd app
        npx better-npm-audit audit --level moderate

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        
    - name: Install dependencies
      run: |
        cd app
        npm ci
        
    - name: Run code quality checks
      run: |
        cd app
        npm run lint
        
    - name: Check for code smells
      uses: sonarcloud/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    needs: [test, security-audit, code-quality]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        
    - name: Install dependencies
      run: |
        cd app
        npm ci
        
    - name: Build application
      run: |
        cd app
        npm run build --if-present
        
    - name: Create deployment artifact
      run: |
        tar -czf junrai-karaoke.tar.gz app/
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: junrai-karaoke-${{ github.sha }}
        path: junrai-karaoke.tar.gz

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: junrai-karaoke-${{ github.sha }}
        
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # Add smoke tests here
        
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: "Deployment completed with status: ${{ job.status }}"