<!-- Page Header -->
<section class="page-header">
    <div class="container">
        <div class="page-header-content">
            <h1 class="page-title">Karaoke Rooms</h1>
            <p class="page-description">
                Choose from our selection of premium karaoke rooms designed for every occasion
            </p>
            <nav class="breadcrumb">
                <a href="/">Home</a>
                <i class="fas fa-chevron-right"></i>
                <span>Rooms</span>
            </nav>
        </div>
    </div>
</section>

<!-- Filters and Search -->
<section class="rooms-filters">
    <div class="container">
        <div class="filters-container">
            <div class="search-box">
                <input type="text" id="roomSearch" placeholder="Search rooms by name..." class="search-input">
                <i class="fas fa-search search-icon"></i>
            </div>
            
            <div class="filter-group">
                <label for="capacityFilter">Capacity:</label>
                <select id="capacityFilter" class="filter-select">
                    <option value="">All Capacities</option>
                    <option value="1-4">1-4 People</option>
                    <option value="5-8">5-8 People</option>
                    <option value="9-12">9-12 People</option>
                    <option value="13+">13+ People</option>
                </select>
            </div>
            
            <div class="filter-group">
                <label for="typeFilter">Room Type:</label>
                <select id="typeFilter" class="filter-select">
                    <option value="">All Types</option>
                    <option value="standard">Standard</option>
                    <option value="premium">Premium</option>
                    <option value="vip">VIP</option>
                    <option value="party">Party Room</option>
                </select>
            </div>
            
            <div class="filter-group">
                <label for="statusFilter">Availability:</label>
                <select id="statusFilter" class="filter-select">
                    <option value="">All Rooms</option>
                    <option value="available">Available Only</option>
                    <option value="occupied">Occupied</option>
                </select>
            </div>
            
            <div class="filter-group">
                <label for="priceSort">Sort by Price:</label>
                <select id="priceSort" class="filter-select">
                    <option value="">Default</option>
                    <option value="asc">Price: Low to High</option>
                    <option value="desc">Price: High to Low</option>
                </select>
            </div>
            
            <button id="clearFilters" class="btn btn-outline btn-small">
                <i class="fas fa-times"></i>
                Clear Filters
            </button>
        </div>
    </div>
</section>

<!-- Loading Spinner -->
<div id="loadingSpinner" class="loading-spinner hidden">
    <div class="spinner"></div>
    <p>Loading rooms...</p>
</div>

<!-- Rooms Grid -->
<section class="rooms-section">
    <div class="container">
        <div class="rooms-results-header">
            <div class="results-count">
                <span id="resultsCount">0</span> rooms found
            </div>
            <div class="view-options">
                <button id="gridView" class="view-btn active" title="Grid View">
                    <i class="fas fa-th"></i>
                </button>
                <button id="listView" class="view-btn" title="List View">
                    <i class="fas fa-list"></i>
                </button>
            </div>
        </div>
        
        <div id="roomsGrid" class="rooms-grid">
            <!-- Rooms will be loaded here dynamically -->
        </div>
        
        <!-- No Results Message -->
        <div id="noResults" class="no-results hidden">
            <i class="fas fa-search"></i>
            <h3>No rooms found</h3>
            <p>Try adjusting your search criteria or filters</p>
            <button id="resetSearch" class="btn btn-primary">Reset Search</button>
        </div>
        
        <!-- Load More Button -->
        <div class="load-more-container">
            <button id="loadMoreBtn" class="btn btn-outline btn-large hidden">
                <i class="fas fa-plus"></i>
                Load More Rooms
            </button>
        </div>
    </div>
</section>

<!-- Room Booking Modal -->
<div id="bookingModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 id="modalRoomName">Book Room</h3>
            <button class="modal-close" id="closeModal">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="modal-body">
            <form id="quickBookingForm">
                <input type="hidden" id="modalRoomId" name="room_id">
                
                <div class="form-group">
                    <label for="bookingDate">Date:</label>
                    <input type="date" id="bookingDate" name="date" required>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label for="startTime">Start Time:</label>
                        <input type="time" id="startTime" name="start_time" required>
                    </div>
                    <div class="form-group">
                        <label for="endTime">End Time:</label>
                        <input type="time" id="endTime" name="end_time" required>
                    </div>
                </div>
                
                <div class="booking-summary">
                    <div class="summary-item">
                        <span>Duration:</span>
                        <span id="durationDisplay">-</span>
                    </div>
                    <div class="summary-item">
                        <span>Price per hour:</span>
                        <span id="pricePerHour">-</span>
                    </div>
                    <div class="summary-item total">
                        <span>Total Cost:</span>
                        <span id="totalCost">-</span>
                    </div>
                </div>
                
                <div class="modal-actions">
                    <button type="button" class="btn btn-outline" id="cancelBooking">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-calendar-check"></i>
                        Confirm Booking
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- JavaScript -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    let currentPage = 1;
    let isLoading = false;
    let allRooms = [];
    let filteredRooms = [];
    
    // Load rooms on page load
    loadRooms();
    
    // Filter and search event listeners
    document.getElementById('roomSearch').addEventListener('input', applyFilters);
    document.getElementById('capacityFilter').addEventListener('change', applyFilters);
    document.getElementById('typeFilter').addEventListener('change', applyFilters);
    document.getElementById('statusFilter').addEventListener('change', applyFilters);
    document.getElementById('priceSort').addEventListener('change', applyFilters);
    document.getElementById('clearFilters').addEventListener('click', clearFilters);
    
    // View toggle
    document.getElementById('gridView').addEventListener('click', () => setView('grid'));
    document.getElementById('listView').addEventListener('click', () => setView('list'));
    
    // Load more button
    document.getElementById('loadMoreBtn').addEventListener('click', loadMoreRooms);
    
    // Modal events
    document.getElementById('closeModal').addEventListener('click', closeBookingModal);
    document.getElementById('cancelBooking').addEventListener('click', closeBookingModal);
    document.getElementById('quickBookingForm').addEventListener('submit', handleQuickBooking);
    
    // Time change events for booking calculation
    document.getElementById('startTime').addEventListener('change', calculateBookingCost);
    document.getElementById('endTime').addEventListener('change', calculateBookingCost);
    
    // Set authentication status from EJS
    var isAuthenticated = '<%= user ? "true" : "false" %>';
    
    async function loadRooms() {
        if (isLoading) return;
        
        isLoading = true;
        showLoading();
        
        try {
            const response = await fetch('/api/rooms?page=' + currentPage);
            const data = await response.json();
            
            if (data.success) {
                if (currentPage === 1) {
                    allRooms = data.rooms;
                } else {
                    allRooms = [...allRooms, ...data.rooms];
                }
                
                filteredRooms = [...allRooms];
                displayRooms(filteredRooms);
                updateResultsCount();
                
                // Show/hide load more button
                const loadMoreBtn = document.getElementById('loadMoreBtn');
                if (data.hasMore) {
                    loadMoreBtn.classList.remove('hidden');
                } else {
                    loadMoreBtn.classList.add('hidden');
                }
            } else {
                showError('Failed to load rooms: ' + data.message);
            }
        } catch (error) {
            console.error('Error loading rooms:', error);
            showError('Failed to load rooms. Please try again.');
        } finally {
            isLoading = false;
            hideLoading();
        }
    }
    
    function displayRooms(rooms) {
        const grid = document.getElementById('roomsGrid');
        const isListView = grid.classList.contains('list-view');
        
        if (currentPage === 1) {
            grid.innerHTML = '';
        }
        
        if (rooms.length === 0) {
            document.getElementById('noResults').classList.remove('hidden');
            return;
        } else {
            document.getElementById('noResults').classList.add('hidden');
        }
        
        rooms.forEach(room => {
            const roomCard = createRoomCard(room, isListView);
            grid.appendChild(roomCard);
        });
    }
    
    function createRoomCard(room, isListView = false) {
        const card = document.createElement('div');
        card.className = 'room-card' + (isListView ? ' list-item' : '');
        card.dataset.roomId = room.room_id;
        
        card.innerHTML = `
            <div class="room-image">
                <img src="/assets/images/rooms/room-${room.room_id}.jpg" 
                     alt="${room.name}" 
                     onerror="this.src='/assets/images/rooms/default-room.jpg'">
                <div class="room-status ${room.status}">
                    <i class="fas fa-circle"></i>
                    ${room.status.charAt(0).toUpperCase() + room.status.slice(1)}
                </div>
                ${room.features ? `<div class="room-features">
                    ${room.features.split(',').slice(0, 2).map(feature => 
                        `<span class="feature-tag">${feature.trim()}</span>`
                    ).join('')}
                </div>` : ''}
            </div>
            <div class="room-content">
                <h3 class="room-name">${room.name}</h3>
                <div class="room-info">
                    <div class="room-detail">
                        <i class="fas fa-users"></i>
                        <span>Up to ${room.capacity} people</span>
                    </div>
                    <div class="room-detail">
                        <i class="fas fa-tag"></i>
                        <span>${room.type_name || 'Standard'}</span>
                    </div>
                    ${room.size ? `<div class="room-detail">
                        <i class="fas fa-expand-arrows-alt"></i>
                        <span>${room.size} sqm</span>
                    </div>` : ''}
                </div>
                ${room.description ? `<p class="room-description">${room.description}</p>` : ''}
                <div class="room-price">
                    <span class="price">₿${room.price_per_hour}</span>
                    <span class="period">per hour</span>
                </div>
                <div class="room-actions">
                    <a href="/rooms/${room.room_id}" class="btn btn-outline btn-small">
                        <i class="fas fa-eye"></i>
                        View Details
                    </a>
                    ${room.status === 'available' ? `
                        <button class="btn btn-primary btn-small quick-book-btn" 
                                data-room-id="${room.room_id}" 
                                data-room-name="${room.name}" 
                                data-price="${room.price_per_hour}">
                            <i class="fas fa-calendar-plus"></i>
                            Quick Book
                        </button>
                    ` : `
                        <button class="btn btn-disabled btn-small" disabled>
                            <i class="fas fa-clock"></i>
                            ${room.status === 'occupied' ? 'Occupied' : 'Unavailable'}
                        </button>
                    `}
                </div>
            </div>
        `;
        
        // Add quick book event listener
        const quickBookBtn = card.querySelector('.quick-book-btn');
        if (quickBookBtn) {
            quickBookBtn.addEventListener('click', (e) => {
                e.preventDefault();
                openBookingModal(
                    quickBookBtn.dataset.roomId,
                    quickBookBtn.dataset.roomName,
                    quickBookBtn.dataset.price
                );
            });
        }
        
        return card;
    }
    
    function applyFilters() {
        const searchTerm = document.getElementById('roomSearch').value.toLowerCase();
        const capacityFilter = document.getElementById('capacityFilter').value;
        const typeFilter = document.getElementById('typeFilter').value;
        const statusFilter = document.getElementById('statusFilter').value;
        const priceSort = document.getElementById('priceSort').value;
        
        filteredRooms = allRooms.filter(room => {
            // Search filter
            if (searchTerm && !room.name.toLowerCase().includes(searchTerm)) {
                return false;
            }
            
            // Capacity filter
            if (capacityFilter) {
                const capacity = parseInt(room.capacity);
                switch (capacityFilter) {
                    case '1-4': if (capacity < 1 || capacity > 4) return false; break;
                    case '5-8': if (capacity < 5 || capacity > 8) return false; break;
                    case '9-12': if (capacity < 9 || capacity > 12) return false; break;
                    case '13+': if (capacity < 13) return false; break;
                }
            }
            
            // Type filter
            if (typeFilter && room.type_name && !room.type_name.toLowerCase().includes(typeFilter.toLowerCase())) {
                return false;
            }
            
            // Status filter
            if (statusFilter && room.status !== statusFilter) {
                return false;
            }
            
            return true;
        });
        
        // Sort by price
        if (priceSort) {
            filteredRooms.sort((a, b) => {
                const priceA = parseFloat(a.price_per_hour);
                const priceB = parseFloat(b.price_per_hour);
                return priceSort === 'asc' ? priceA - priceB : priceB - priceA;
            });
        }
        
        currentPage = 1;
        displayRooms(filteredRooms);
        updateResultsCount();
    }
    
    function clearFilters() {
        document.getElementById('roomSearch').value = '';
        document.getElementById('capacityFilter').value = '';
        document.getElementById('typeFilter').value = '';
        document.getElementById('statusFilter').value = '';
        document.getElementById('priceSort').value = '';
        
        filteredRooms = [...allRooms];
        displayRooms(filteredRooms);
        updateResultsCount();
    }
    
    function updateResultsCount() {
        document.getElementById('resultsCount').textContent = filteredRooms.length;
    }
    
    function setView(viewType) {
        const grid = document.getElementById('roomsGrid');
        const gridBtn = document.getElementById('gridView');
        const listBtn = document.getElementById('listView');
        
        if (viewType === 'list') {
            grid.classList.add('list-view');
            listBtn.classList.add('active');
            gridBtn.classList.remove('active');
        } else {
            grid.classList.remove('list-view');
            gridBtn.classList.add('active');
            listBtn.classList.remove('active');
        }
        
        // Re-render current rooms with new view
        displayRooms(filteredRooms);
    }
    
    function loadMoreRooms() {
        currentPage++;
        loadRooms();
    }
    
    function openBookingModal(roomId, roomName, pricePerHour) {
        if (!isAuthenticated) {
            window.location.href = '/login?redirect=' + encodeURIComponent(window.location.pathname);
            return;
        }
        document.getElementById('modalRoomId').value = roomId;
        document.getElementById('modalRoomName').textContent = roomName;
        document.getElementById('pricePerHour').textContent = '₿' + pricePerHour;
        
        // Set minimum date to today
        const today = new Date().toISOString().split('T')[0];
        document.getElementById('bookingDate').value = today;
        document.getElementById('bookingDate').min = today;
        document.getElementById('bookingModal').classList.add('active');
    }
    
    function closeBookingModal() {
        document.getElementById('bookingModal').classList.remove('active');
        document.getElementById('quickBookingForm').reset();
    }
    
    function calculateBookingCost() {
        const startTime = document.getElementById('startTime').value;
        const endTime = document.getElementById('endTime').value;
        const pricePerHourText = document.getElementById('pricePerHour').textContent;
        
        if (startTime && endTime && pricePerHourText) {
            const start = new Date('2000-01-01T' + startTime);
            const end = new Date('2000-01-01T' + endTime);
            
            if (end > start) {
                const durationMs = end - start;
                const durationHours = durationMs / (1000 * 60 * 60);
                const pricePerHour = parseFloat(pricePerHourText.replace('₿', ''));
                const totalCost = durationHours * pricePerHour;
                
                document.getElementById('durationDisplay').textContent = durationHours + ' hours';
                document.getElementById('totalCost').textContent = '₿' + totalCost.toFixed(2);
            } else {
                document.getElementById('durationDisplay').textContent = '-';
                document.getElementById('totalCost').textContent = '-';
            }
        }
    }
    
    async function handleQuickBooking(e) {
        e.preventDefault();
        
        const formData = new FormData(e.target);
        const bookingData = Object.fromEntries(formData);
        
        // Combine date and time
        bookingData.start_time = bookingData.date + 'T' + bookingData.start_time;
        bookingData.end_time = bookingData.date + 'T' + bookingData.end_time;
        delete bookingData.date;
        
        try {
            const response = await fetch('/api/bookings', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
                },
                body: JSON.stringify(bookingData)
            });
            
            const result = await response.json();
            
            if (result.success) {
                closeBookingModal();
                showSuccess('Booking created successfully! Redirecting to your bookings...');
                setTimeout(() => {
                    window.location.href = '/bookings';
                }, 2000);
            } else {
                showError('Booking failed: ' + result.message);
            }
        } catch (error) {
            console.error('Booking error:', error);
            showError('Failed to create booking. Please try again.');
        }
    }
    
    function showLoading() {
        document.getElementById('loadingSpinner').classList.remove('hidden');
    }
    
    function hideLoading() {
        document.getElementById('loadingSpinner').classList.add('hidden');
    }
    
    function showError(message) {
        // You can implement a toast notification system here
        alert(message);
    }
    
    function showSuccess(message) {
        // You can implement a toast notification system here
        alert(message);
    }
    
    // Utility: Get JWT token from localStorage
    function getToken() {
        return localStorage.getItem('token');
    }

    // Example: Use JWT for protected API calls
    async function createRoom(roomData) {
        const token = getToken();
        const response = await fetch('/api/rooms', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + token
            },
            body: JSON.stringify(roomData)
        });
        return response.json();
    }
    
    // Close modal when clicking outside
    window.addEventListener('click', function(e) {
        const modal = document.getElementById('bookingModal');
        if (e.target === modal) {
            closeBookingModal();
        }
    });
});
</script>