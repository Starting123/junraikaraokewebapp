<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover, user-scalable=no">
    <title>ระบบจองห้อง - Junrai Karaoke</title>
    <link rel="stylesheet" href="/stylesheets/global.css">
    <link rel="stylesheet" href="/stylesheets/bookings.css">
    <link rel="stylesheet" href="/stylesheets/responsive-fixes.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    
    <!-- Inline CSS for file upload area debugging -->
    <style>
        #transferProofForm {
            display: none !important;
        }
        
        #transferProofForm.show {
            display: block !important;
        }
        
        .file-upload-area-debug {
            border: 4px dashed #E07B39 !important;
            background: #FFF3E0 !important;
            min-height: 160px !important;
            padding: 25px !important;
            margin: 20px 0 !important;
            border-radius: 15px !important;
            display: flex !important;
            flex-direction: column !important;
            align-items: center !important;
            justify-content: center !important;
            text-align: center !important;
            cursor: pointer !important;
            position: relative !important;
            box-shadow: 0 4px 15px rgba(224, 123, 57, 0.3) !important;
            transition: all 0.3s ease !important;
        }
        
        .file-upload-area-debug:hover {
            border-color: #2ECC71 !important;
            background: #E8F5E8 !important;
            transform: translateY(-3px) !important;
            box-shadow: 0 6px 20px rgba(46, 204, 113, 0.4) !important;
        }
        
        .file-upload-area-debug .upload-text {
            pointer-events: none !important;
            z-index: 1 !important;
        }
        
        .file-upload-area-debug .upload-text i {
            font-size: 4rem !important;
            color: #E07B39 !important;
            margin-bottom: 15px !important;
        }
        
        .file-upload-area-debug .upload-text p {
            font-size: 1.2rem !important;
            font-weight: 700 !important;
            color: #8B4513 !important;
            margin: 10px 0 !important;
        }
        
        .file-upload-area-debug .upload-text small {
            font-size: 1rem !important;
            color: #666 !important;
            line-height: 1.5 !important;
        }
        
        .file-input-debug {
            position: absolute !important;
            top: 0 !important;
            left: 0 !important;
            width: 100% !important;
            height: 100% !important;
            opacity: 0 !important;
            cursor: pointer !important;
            z-index: 2 !important;
        }
        
        /* Enhanced File Upload Styles */
        .enhanced-file-upload {
            margin: 20px 0 !important;
        }
        
        .upload-container {
            display: flex !important;
            align-items: stretch !important;
            gap: 0 !important;
            border: 3px solid #E07B39 !important;
            border-radius: 12px !important;
            overflow: hidden !important;
            background: white !important;
            box-shadow: 0 4px 12px rgba(224, 123, 57, 0.2) !important;
            transition: all 0.3s ease !important;
        }
        
        .upload-container:hover {
            border-color: #2ECC71 !important;
            box-shadow: 0 6px 16px rgba(46, 204, 113, 0.3) !important;
            transform: translateY(-2px) !important;
        }
        
        .upload-btn {
            background: #E07B39 !important;
            color: white !important;
            border: none !important;
            padding: 20px 25px !important;
            font-weight: 600 !important;
            font-size: 1rem !important;
            border-radius: 0 !important;
            min-width: 180px !important;
            transition: all 0.3s ease !important;
        }
        
        .upload-btn:hover {
            background: #2ECC71 !important;
            transform: scale(1.02) !important;
        }
        
        .upload-info {
            flex: 1 !important;
            padding: 15px 20px !important;
            display: flex !important;
            flex-direction: column !important;
            justify-content: center !important;
            background: #FFF3E0 !important;
        }
        
        .file-name-display {
            color: #666 !important;
            font-size: 1rem !important;
            margin-bottom: 5px !important;
            font-weight: 500 !important;
        }
        
        .file-name-display.has-file {
            color: #2ECC71 !important;
            font-weight: 600 !important;
        }
        
        .upload-hint {
            color: #8B4513 !important;
            font-size: 0.85rem !important;
            margin: 0 !important;
        }
        
        /* Enhanced File Preview */
        .file-preview-enhanced {
            margin-top: 15px !important;
            border: 2px solid #2ECC71 !important;
            border-radius: 10px !important;
            overflow: hidden !important;
            background: white !important;
            box-shadow: 0 3px 10px rgba(46, 204, 113, 0.2) !important;
        }
        
        .preview-header {
            display: flex !important;
            justify-content: space-between !important;
            align-items: center !important;
            padding: 15px 20px !important;
            background: #E8F5E8 !important;
            border-bottom: 1px solid #2ECC71 !important;
        }
        
        .file-details {
            display: flex !important;
            align-items: center !important;
            gap: 10px !important;
            flex: 1 !important;
        }
        
        .file-info-text {
            color: #155724 !important;
            font-weight: 600 !important;
            font-size: 0.95rem !important;
        }
        
        .preview-content {
            padding: 15px !important;
            text-align: center !important;
        }
        
        .preview-image {
            max-width: 100% !important;
            max-height: 200px !important;
            border-radius: 8px !important;
            border: 1px solid #dee2e6 !important;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1) !important;
        }
        
        .upload-tips {
            margin-top: 10px !important;
            text-align: center !important;
        }
        
        .upload-tips small {
            color: #666 !important;
            font-size: 0.85rem !important;
        }
        
        /* Mobile Responsive */
        @media (max-width: 768px) {
            .upload-container {
                flex-direction: column !important;
            }
            
            .upload-btn {
                min-width: auto !important;
                padding: 18px !important;
                border-radius: 0 !important;
            }
            
            .upload-info {
                text-align: center !important;
                padding: 20px !important;
            }
            
            .preview-header {
                flex-direction: column !important;
                gap: 10px !important;
                text-align: center !important;
            }
            
            .file-details {
                justify-content: center !important;
            }
        }
    </style>
    <script src="https://js.stripe.com/v3/"></script>
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar">
        <div class="container">
            <div style="display: flex; justify-content: space-between; align-items: center; width: 100%;">
                <a href="/" class="navbar-brand">
                    <i class="fas fa-microphone-alt"></i>
                    Junrai Karaoke
                </a>
                <ul class="navbar-nav">
                    <li><a href="/" class="nav-link">หน้าหลัก</a></li>
                    <li><a href="/rooms" class="nav-link">ห้องคาราโอเกะ</a></li>
                    <li><a href="/bookings" class="nav-link active">การจอง</a></li>
                    <li><a href="/contact" class="nav-link">ติดต่อเรา</a></li>
                    <li><a href="/dashboard" class="nav-link" id="dashboardLink" style="display: none;">แดชบอร์ด</a></li>
                    <li><a href="/admin" class="nav-link" id="adminLink" style="display: none;">ผู้ดูแลระบบ</a></li>
                    <li><a href="/auth" class="nav-link" id="authLink">เข้าสู่ระบบ</a></li>
                    <li><button class="btn btn-outline" onclick="logout()" id="logoutBtn" style="display: none;">ออกจากระบบ</button></li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        <!-- Page Header -->
        <div class="page-header">
            <h1><i class="fas fa-calendar-alt"></i> ระบบจองห้องคาราโอเกะ</h1>
            <p>จองห้องคาราโอเกะและดูรายการการจองของคุณ</p>
        </div>

        <!-- Booking Tabs -->
        <div class="tab-container">
            <div class="tab-nav">
                <button class="tab-btn active" onclick="showTab('booking')">
                    <i class="fas fa-plus-circle"></i>
                    จองห้องใหม่
                </button>
                <button class="tab-btn" onclick="showTab('mybookings')" id="myBookingsTab" style="display: none;">
                    <i class="fas fa-list"></i>
                    การจองของฉัน
                </button>
                <button class="tab-btn" onclick="showTab('allbookings')" id="allBookingsTab" style="display: none;">
                    <i class="fas fa-users"></i>
                    การจองทั้งหมด
                </button>
            </div>

            <!-- New Booking Tab -->
            <div class="tab-content active" id="bookingTab">
                <div class="booking-form-container">
                    <div class="room-selection">
                        <h3><i class="fas fa-door-open"></i> เลือกห้อง</h3>
                        <div class="room-grid" id="availableRooms">
                            <div class="loading">
                                <div class="spinner"></div>
                                <p>กำลังโหลดห้องที่ว่าง...</p>
                            </div>
                        </div>
                    </div>

                    <!-- Selected room info -->
                    <div class="room-info-summary" id="roomInfoSummary" style="display: none;">
                        <h3><i class="fas fa-info-circle"></i> ข้อมูลห้องที่เลือก</h3>
                        <div id="roomDetails">
                            <!-- Room details will be dynamically loaded here -->
                        </div>
                    </div>

                    <div class="booking-details" id="bookingForm" style="display: none;">
                        <h3><i class="fas fa-calendar-check"></i> รายละเอียดการจอง</h3>
                        
                        <!-- Add fields for name, phone, and address in the booking form -->
                        <form id="newBookingForm" method="POST" action="/api/book">
                          <div class="form-group">
                            <label for="name">ชื่อ-นามสกุล</label>
                            <input type="text" id="name" name="name" class="form-control" required>
                          </div>
            
                          <div class="form-group">
                            <label for="phone">เบอร์โทรศัพท์</label>
                            <input type="text" id="phone" name="phone" class="form-control" required>
                          </div>
            
                          <div class="form-group">
                            <label for="address">ที่อยู่ (ไม่บังคับ)</label>
                            <input type="text" id="address" name="address" class="form-control">
                          </div>
            
                          
            
                          <div class="form-group">
                            <label for="start_time">Start Time</label>
                            <input type="datetime-local" id="start_time" name="start_time" class="form-control" required>
                          </div>
            
                          <div class="form-group">
                            <label for="end_time">End Time</label>
                            <input type="datetime-local" id="end_time" name="end_time" class="form-control" required>
                          </div>
            
                          <button type="submit" class="btn btn-primary">จองห้อง</button>
                        </form>
                      </div>
                      
                      <!-- Selected room info (hidden fields) -->
                      <div id="selectedRoomInfo" class="selected-room" style="display: none;"></div>
                      <input type="hidden" id="selectedRoomId" name="selectedRoomId">
                </div>
            </div>

            <!-- My Bookings Tab -->
            <div class="tab-content" id="mybookingsTab">
                <div class="bookings-list" id="myBookingsList">
                    <div class="loading">
                        <div class="spinner"></div>
                        <p>กำลังโหลดการจองของคุณ...</p>
                    </div>
                </div>
            </div>

            <!-- All Bookings Tab (Admin) -->
            <div class="tab-content" id="allbookingsTab">
                <div class="admin-controls">
                    <div class="filter-controls">
                        <select id="statusFilter" onchange="filterAllBookings()" class="form-select">
                            <option value="">สถานะทั้งหมด</option>
                            <option value="active">กำลังใช้งาน</option>
                            <option value="completed">เสร็จสิ้น</option>
                            <option value="cancelled">ยกเลิก</option>
                        </select>
                        
                        <select id="roomFilter" onchange="filterAllBookings()" class="form-select">
                            <option value="">ห้องทั้งหมด</option>
                        </select>
                    </div>
                </div>
                
                <div class="bookings-list" id="allBookingsList">
                    <div class="loading">
                        <div class="spinner"></div>
                        <p>กำลังโหลดการจองทั้งหมด...</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Booking Detail Modal -->
    <div class="modal-overlay" id="bookingModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 id="modalTitle">รายละเอียดการจอง</h3>
                <button class="modal-close" onclick="closeModal('bookingModal')">&times;</button>
            </div>
            <div class="modal-body" id="modalBody">
                <!-- Content will be loaded here -->
            </div>
        </div>
    </div>

    <!-- Success/Error Messages -->
    <div class="toast-container" id="toastContainer"></div>

    <script>
        // Global variables
        let currentUser = null;
        let availableRooms = [];
        let allRooms = [];
        let myBookings = [];
        let allBookings = [];
        const API_BASE = '/api';

        // Initialize page
        document.addEventListener('DOMContentLoaded', () => {
            checkAuth();
            loadAvailableRooms();
            setDefaultDateTime();
            initializeStripe();
            setupPaymentMethodListeners();
            loadRoomInfo();
        });

        // Authentication check
        function checkAuth() {
            const token = localStorage.getItem('token');
            const user = localStorage.getItem('user');
            
            if (token && user) {
                currentUser = JSON.parse(user);
                document.getElementById('authLink').style.display = 'none';
                document.getElementById('logoutBtn').style.display = 'block';
                document.getElementById('dashboardLink').style.display = 'block';
                document.getElementById('myBookingsTab').style.display = 'block';
                
                // Show admin tab and admin link
                if (currentUser.role_id === 1) {
                    document.getElementById('allBookingsTab').style.display = 'block';
                    document.getElementById('adminLink').style.display = 'block';
                }
            } else {
                // Redirect to login if not authenticated
                window.location.href = '/auth';
            }
        }

        // Logout function
        function logout() {
            localStorage.removeItem('token');
            localStorage.removeItem('user');
            window.location.href = '/auth';
        }

        // Handle authentication errors
        function handleAuthError(response) {
            if (response.status === 401 || response.status === 403) {
                showError('Session หมดอายุ กรุณาเข้าสู่ระบบใหม่');
                setTimeout(() => {
                    logout();
                }, 2000);
                return true;
            }
            return false;
        }

        // Enhanced fetch with auth error handling
        async function fetchWithAuth(url, options = {}) {
            const token = localStorage.getItem('token');
            const response = await fetch(url, {
                ...options,
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`,
                    ...options.headers
                }
            });

            if (handleAuthError(response)) {
                throw new Error('Authentication failed');
            }

            return response;
        }

        // Set default date and time
        function setDefaultDateTime() {
            const now = new Date();
            const today = now.toISOString().split('T')[0];
            const currentHour = now.getHours();
            const nextHour = (currentHour + 1).toString().padStart(2, '0') + ':00';
            const endHour = (currentHour + 3).toString().padStart(2, '0') + ':00';
            
            document.getElementById('startDate').value = today;
            document.getElementById('endDate').value = today;
            document.getElementById('startTime').value = nextHour;
            document.getElementById('endTime').value = endHour;
        }

        // Tab management
        function showTab(tabName, evt) {
            // Hide all tabs
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            
            // Show selected tab
            document.getElementById(tabName + 'Tab').classList.add('active');
            // Use the passed event if available; otherwise try to find the button
            try {
                if (evt && evt.target) {
                    evt.target.classList.add('active');
                } else {
                    const selector = `.tab-btn[onclick="showTab('${tabName}')"]`;
                    const btn = document.querySelector(selector) || document.querySelector(`.tab-btn[data-tab="${tabName}"]`);
                    if (btn) btn.classList.add('active');
                }
            } catch (e) {
                // ignore failures setting active class
                console.warn('showTab: could not set active button', e);
            }
            
            // Load data based on tab
            switch(tabName) {
                case 'mybookings':
                    loadMyBookings();
                    break;
                case 'allbookings':
                    loadAllBookings();
                    loadRoomsForFilter();
                    break;
            }
        }

        // Load available rooms
        async function loadAvailableRooms() {
            try {
                // อัปเดตสถานะห้องก่อน
                await updateRoomStatus();
                
                const response = await fetch(`${API_BASE}/rooms/roomForm`);
                if (response.ok) {
                    allRooms = await response.json();
                    availableRooms = allRooms.filter(room => room.status === 'available');
                    displayAvailableRooms();
                } else {
                    throw new Error('Failed to load rooms');
                }
            } catch (error) {
                console.error('Error loading rooms:', error);
                document.getElementById('availableRooms').innerHTML = `
                    <div class="error-message">
                        <i class="fas fa-exclamation-triangle"></i>
                        <p>ไม่สามารถโหลดข้อมูลห้องได้</p>
                    </div>
                `;
            }
        }

        // อัปเดตสถานะห้องแบบ real-time
        async function updateRoomStatus() {
            try {
                await fetch(`${API_BASE}/rooms/update-status`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
            } catch (error) {
                console.error('Error updating room status:', error);
            }
        }

        // Display available rooms
        function displayAvailableRooms() {
            const container = document.getElementById('availableRooms');
            
            if (availableRooms.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-door-closed"></i>
                        <h3>ไม่มีห้องว่าง</h3>
                        <p>ขณะนี้ไม่มีห้องว่างให้บริการ</p>
                    </div>
                `;
                return;
            }

            container.innerHTML = availableRooms.map(room => `
                <div class="room-card" onclick="selectRoom(${room.room_id})">
                    <div class="room-status available">
                        <i class="fas fa-check-circle"></i>
                        ว่าง
                    </div>
                    
                    <div class="room-info">
                        <h4><i class="fas fa-door-open"></i> ${room.name}</h4>
                        <p><i class="fas fa-tags"></i> ${room.type_name || 'ไม่ระบุประเภท'}</p>
                        <p><i class="fas fa-users"></i> ${room.capacity || 'ไม่ระบุ'} คน</p>
                    </div>
                    
                    <button class="btn btn-primary">เลือกห้องนี้</button>
                </div>
            `).join('');
        }

        // Select room for booking
        function selectRoom(roomId) {
            const room = availableRooms.find(r => r.room_id === roomId);
            if (!room) return;
            
            document.getElementById('selectedRoomId').value = roomId;
            document.getElementById('selectedRoomInfo').innerHTML = `
                <div class="selected-room">
                    <h4><i class="fas fa-door-open"></i> ${room.name}</h4>
                    <div class="room-details">
                        <span><i class="fas fa-tags"></i> ${room.type_name || 'ไม่ระบุประเภท'}</span>
                        <span><i class="fas fa-users"></i> ${room.capacity || 'ไม่ระบุ'} คน</span>
                    </div>
                </div>
            `;
            
            // Display room information
            displayRoomInfo(room);
            
            document.getElementById('bookingForm').style.display = 'block';
            document.getElementById('bookingForm').scrollIntoView({ behavior: 'smooth' });
            
            updateBookingSummary();
        }

        // Display selected room information
        function displayRoomInfo(room) {
            const roomInfoSummary = document.getElementById('roomInfoSummary');
            const roomDetails = document.getElementById('roomDetails');

            if (room) {
                roomDetails.innerHTML = `
                    <p><strong>ชื่อห้อง:</strong> ${room.name}</p>
                    <p><strong>ประเภท:</strong> ${room.type_name || 'ไม่ระบุประเภท'}</p>
                    <p><strong>ความจุ:</strong> ${room.capacity || 'ไม่ระบุ'} คน</p>
                `;
                roomInfoSummary.style.display = 'block';
            } else {
                roomDetails.innerHTML = '';
                roomInfoSummary.style.display = 'none';
            }
        }

        // Enhanced fix for accessing 'value' of null elements
        function updateBookingSummary() {
          const startDateElement = document.getElementById('startDate');
          const startTimeElement = document.getElementById('startTime');
          const endDateElement = document.getElementById('endDate');
          const endTimeElement = document.getElementById('endTime');

          // Ensure elements exist before accessing their values
          if (!startDateElement || !startTimeElement || !endDateElement || !endTimeElement) {
            console.error('One or more required elements are missing');
            return;
          }

          const startDate = startDateElement.value || '';
          const startTime = startTimeElement.value || '';
          const endDate = endDateElement.value || '';
          const endTime = endTimeElement.value || '';

          if (startDate && startTime && endDate && endTime) {
            try {
              const start = new Date(`${startDate}T${startTime}`);
              const end = new Date(`${endDate}T${endTime}`);
              const duration = (end - start) / (1000 * 60 * 60); // hours
              
              document.getElementById('bookingSummary').innerHTML = `
                <div class="summary-card">
                  <h4><i class="fas fa-clock"></i> สรุปการจอง</h4>
                  <div class="summary-details">
                    <p><strong>เริ่ม:</strong> ${formatDateTime(start)}</p>
                    <p><strong>สิ้นสุด:</strong> ${formatDateTime(end)}</p>
                    <p><strong>ระยะเวลา:</strong> ${duration.toFixed(2)} ชั่วโมง</p>
                  </div>
                </div>
              `;
            } catch (error) {
              console.error('Error calculating booking summary:', error);
            }
          } else {
            console.warn('Incomplete date/time values for booking summary');
          }
        }

        // Format date time
        function formatDateTime(date) {
            return date.toLocaleString('th-TH', {
                weekday: 'short',
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }

        // Ensure time format validation in booking form submission
function validateBookingForm() {
  const startDateElement = document.getElementById('startDate');
  const startTimeElement = document.getElementById('startTime');
  const endDateElement = document.getElementById('endDate');
  const endTimeElement = document.getElementById('endTime');

  if (!startDateElement || !startTimeElement || !endDateElement || !endTimeElement) {
    console.error('One or more required elements are missing');
    return false;
  }

  const startDate = startDateElement.value;
  const startTime = startTimeElement.value;
  const endDate = endDateElement.value;
  const endTime = endTimeElement.value;

  const startDateTime = `${startDate}T${startTime}:00`;
  const endDateTime = `${endDate}T${endTime}:00`;

  // Validate ISO8601 format
  const iso8601Regex = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}$/;
  if (!iso8601Regex.test(startDateTime) || !iso8601Regex.test(endDateTime)) {
    showToast('กรุณาใส่เวลาในรูปแบบที่ถูกต้อง (ISO8601)', 'error');
    return false;
  }

  const start = new Date(startDateTime);
  const end = new Date(endDateTime);
  const now = new Date();

  if (start <= now) {
    showToast('เวลาเริ่มต้องเป็นในอนาคต', 'error');
    return false;
  }

  if (end <= start) {
    showToast('เวลาสิ้นสุดต้องหลังจากเวลาเริ่ม', 'error');
    return false;
  }

  return true;
}

// Attach validation to form submission
const bookingForm = document.getElementById('newBookingForm');
if (bookingForm) {
  bookingForm.addEventListener('submit', (e) => {
    if (!validateBookingForm()) {
      e.preventDefault();
    }
  });
}

        // Handle booking form submission
        document.getElementById('newBookingForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const roomId = document.getElementById('selectedRoomId').value;
            const startDate = document.getElementById('startDate').value;
            const startTime = document.getElementById('startTime').value;
            const endDate = document.getElementById('endDate').value;
            const endTime = document.getElementById('endTime').value;
            
            const startDateTime = `${startDate}T${startTime}:00`;
            const endDateTime = `${endDate}T${endTime}:00`;
            
            // Validation
            const start = new Date(startDateTime);
            const end = new Date(endDateTime);
            const now = new Date();
            
            if (start <= now) {
                showToast('เวลาเริ่มต้องเป็นในอนาคต', 'error');
                return;
            }
            
            if (end <= start) {
                showToast('เวลาสิ้นสุดต้องหลังจากเวลาเริ่ม', 'error');
                return;
            }
            
            try {
                const token = localStorage.getItem('token');
                const response = await fetch(`${API_BASE}/bookings`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify({
                        room_id: parseInt(roomId),
                        start_time: startDateTime,
                        end_time: endDateTime
                    })
                });
                
                const data = await response.json();
                
                if (response.ok && data.success) {
                    showToast(data.message || 'จองห้องสำเร็จ!', 'success');
                    resetBookingForm();
                    loadAvailableRooms(); // Refresh available rooms
                    
                    // Switch to my bookings tab
                    setTimeout(() => {
                        showTab('mybookings');
                        document.querySelector('[onclick="showTab(\'mybookings\')"]').click();
                    }, 2000);
                } else {
                    // Handle room conflict errors with detailed information
                    if (data.conflicts && data.conflicts.length > 0) {
                        let errorMsg = data.message;
                        if (data.suggestion) {
                            errorMsg += '\n\n' + data.suggestion;
                            errorMsg += '\n\nต้องการจองล่วงหน้าหรือไม่?';
                        }
                        showToast(errorMsg, 'error');
                    } else {
                        showToast(data.message || data.error || 'เกิดข้อผิดพลาดในการจอง', 'error');
                    }
                }
            } catch (error) {
                console.error('Booking error:', error);
                showToast('เกิดข้อผิดพลาดในการจอง', 'error');
            }
        });

        // Reset booking form
        function resetBookingForm() {
            document.getElementById('newBookingForm').reset();
            document.getElementById('bookingForm').style.display = 'none';
            document.getElementById('selectedRoomInfo').innerHTML = '';
            document.getElementById('bookingSummary').innerHTML = '';
            setDefaultDateTime();
        }

        // Load my bookings
        async function loadMyBookings() {
            try {
                const token = localStorage.getItem('token');
                const response = await fetch(`${API_BASE}/bookings`, {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    myBookings = data.bookings;
                    displayBookings(myBookings, 'myBookingsList');
                } else {
                    throw new Error('Failed to load bookings');
                }
            } catch (error) {
                console.error('Error loading my bookings:', error);
                document.getElementById('myBookingsList').innerHTML = `
                    <div class="error-message">
                        <i class="fas fa-exclamation-triangle"></i>
                        <p>ไม่สามารถโหลดการจองได้</p>
                    </div>
                `;
            }
        }

        // Load all bookings (admin)
        async function loadAllBookings() {
            try {
                const token = localStorage.getItem('token');
                const response = await fetch(`${API_BASE}/bookings`, {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    allBookings = data.bookings;
                    displayBookings(allBookings, 'allBookingsList');
                } else {
                    throw new Error('Failed to load all bookings');
                }
            } catch (error) {
                console.error('Error loading all bookings:', error);
                document.getElementById('allBookingsList').innerHTML = `
                    <div class="error-message">
                        <i class="fas fa-exclamation-triangle"></i>
                        <p>ไม่สามารถโหลดการจองได้</p>
                    </div>
                `;
            }
        }

        // Display bookings
        function displayBookings(bookings, containerId) {
            const container = document.getElementById(containerId);
            
            if (bookings.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-calendar-times"></i>
                        <h3>ไม่มีการจอง</h3>
                        <p>ยังไม่มีการจองในระบบ</p>
                    </div>
                `;
                return;
            }

            container.innerHTML = bookings.map(booking => `
                <div class="booking-card ${booking.status}" onclick="viewBooking(${booking.booking_id})">
                    <div class="booking-header">
                        <div class="booking-status ${booking.status}">
                            <i class="fas ${getStatusIcon(booking.status)}"></i>
                            ${getStatusText(booking.status)}
                        </div>
                        <div class="booking-id">#${booking.booking_id}</div>
                    </div>
                    
                    <div class="booking-body">
                        <h4><i class="fas fa-door-open"></i> ${booking.room_name}</h4>
                        <div class="room-details">
                            <span class="room-type">${booking.type_name || 'ห้องธรรมดา'}</span>
                            <span class="room-capacity"><i class="fas fa-users"></i> ${booking.capacity || 4} คน</span>
                        </div>
                        <div class="booking-info">
                            <div class="info-item">
                                <i class="fas fa-user"></i>
                                <span>${booking.user_name}</span>
                            </div>
                            <div class="info-item">
                                <i class="fas fa-calendar"></i>
                                <span>${formatDateTime(new Date(booking.start_time))}</span>
                            </div>
                            <div class="info-item">
                                <i class="fas fa-clock"></i>
                                <span>${formatDateTime(new Date(booking.end_time))}</span>
                            </div>
                            <div class="info-item">
                                <i class="fas fa-hourglass-half"></i>
                                <span>${booking.duration_hours || 1} ชั่วโมง</span>
                            </div>
                            <div class="info-item price">
                                <i class="fas fa-money-bill-wave"></i>
                                <span>${booking.total_price || 0} บาท</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="booking-footer">
                        ${booking.status === 'active' && (currentUser.user_id === booking.user_id || currentUser.role_id === 1) ? `
                        <button class="btn btn-warning btn-sm" onclick="event.stopPropagation(); cancelBooking(${booking.booking_id})">
                            <i class="fas fa-times"></i>
                            ยกเลิก
                        </button>
                        ` : ''}
                        
                        <button class="btn btn-outline btn-sm" onclick="event.stopPropagation(); viewBookingDetails(${booking.booking_id})">
                            <i class="fas fa-eye"></i>
                            ดูรายละเอียด
                        </button>
                        
                        ${booking.status === 'active' && booking.payment_status === 'pending' && (currentUser.user_id === booking.user_id || currentUser.role_id === 1) ? `
                        <button class="btn btn-success btn-sm" onclick="event.stopPropagation(); showPaymentModal(${booking.booking_id})">
                            <i class="fas fa-credit-card"></i>
                            ชำระเงิน
                        </button>
                        ` : ''}
                        
                        ${booking.payment_status === 'paid' ? `
                        <span class="payment-status paid">
                            <i class="fas fa-check-circle"></i>
                            ชำระแล้ว
                        </span>
                        <button class="btn btn-info btn-sm" onclick="event.stopPropagation(); downloadPaymentSlip(${booking.booking_id})" title="ดาวน์โหลดใบเสร็จ">
                            <i class="fas fa-download"></i>
                            ใบเสร็จ PDF
                        </button>
                        ` : booking.payment_status === 'pending' ? `
                        <span class="payment-status pending">
                            <i class="fas fa-clock"></i>
                            รอชำระเงิน
                        </span>
                        ` : ''}
                    </div>
                </div>
            `).join('');
        }

        // Get status icon
        function getStatusIcon(status) {
            switch(status) {
                case 'active': return 'fa-clock';
                case 'completed': return 'fa-check-circle';
                case 'cancelled': return 'fa-times-circle';
                default: return 'fa-question-circle';
            }
        }

        // Get status text
        function getStatusText(status) {
            switch(status) {
                case 'active': return 'กำลังใช้งาน';
                case 'completed': return 'เสร็จสิ้น';
                case 'cancelled': return 'ยกเลิก';
                default: return 'ไม่ทราบสถานะ';
            }
        }

        // View booking details
        async function viewBookingDetails(bookingId) {
            try {
                const token = localStorage.getItem('token');
                const response = await fetch(`${API_BASE}/bookings/${bookingId}`, {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    showBookingDetailsModal(data.booking);
                } else {
                    showToast('ไม่สามารถโหลดรายละเอียดการจองได้', 'error');
                }
            } catch (error) {
                console.error('View booking error:', error);
                showToast('เกิดข้อผิดพลาดในการโหลดรายละเอียด', 'error');
            }
        }

        // Show booking details modal
        function showBookingDetailsModal(booking) {
            const modal = document.getElementById('bookingDetailsModal');
            const modalBody = document.getElementById('bookingDetailsBody');
            
            modalBody.innerHTML = `
                <div class="booking-details">
                    <div class="detail-row">
                        <strong><i class="fas fa-door-open"></i> ห้อง:</strong>
                        <span>${booking.room_name}</span>
                    </div>
                    <div class="detail-row">
                        <strong><i class="fas fa-tag"></i> ประเภทห้อง:</strong>
                        <span>${booking.type_name || 'ห้องธรรมด'}</span>
                    </div>
                    <div class="detail-row">
                        <strong><i class="fas fa-users"></i> ขนาดห้อง:</strong>
                        <span>${booking.capacity || 4} คน</span>
                    </div>
                    <div class="detail-row">
                        <strong><i class="fas fa-money-bill-wave"></i> ราคาต่อชั่วโมง:</strong>
                        <span>${booking.price_per_hour || 0} บาท</span>
                    </div>
                    <div class="detail-row">
                        <strong><i class="fas fa-calendar"></i> วันเวลาเริ่ม:</strong>
                        <span>${formatDateTime(new Date(booking.start_time))}</span>
                    </div>
                    <div class="detail-row">
                        <strong><i class="fas fa-calendar-check"></i> วันเวลาสิ้นสุด:</strong>
                        <span>${formatDateTime(new Date(booking.end_time))}</span>
                    </div>
                    <div class="detail-row">
                        <strong><i class="fas fa-hourglass-half"></i> ระยะเวลาการใช้งาน:</strong>
                        <span>${booking.duration_hours || 1} ชั่วโมง</span>
                    </div>
                    <div class="detail-row total-price">
                        <strong><i class="fas fa-receipt"></i> ราคารวม:</strong>
                        <span>${booking.total_price || 0} บาท</span>
                    </div>
                    <div class="detail-row">
                        <strong><i class="fas fa-info-circle"></i> สถานะห้อง:</strong>
                        <span class="status-badge ${booking.room_status}">
                            ${booking.room_status === 'available' ? 'ว่าง' : 'ถูกจองแล้ว'}
                        </span>
                    </div>
                    <div class="detail-row">
                        <strong><i class="fas fa-credit-card"></i> สถานะการชำระเงิน:</strong>
                        <span class="payment-badge ${booking.payment_status}">
                            ${getPaymentStatusText(booking.payment_status)}
                        </span>
                    </div>
                </div>
            `;
            
            modal.style.display = 'block';
        }

        // Get payment status text
        function getPaymentStatusText(status) {
            switch(status) {
                case 'paid': return 'ชำระแล้ว';
                case 'pending': return 'รอชำระเงิน';
                case 'failed': return 'ชำระไม่สำเร็จ';
                default: return 'ไม่ทราบสถานะ';
            }
        }

        // Show payment modal
        function showPaymentModal(bookingId) {
            currentBookingId = bookingId;
            
            // Use the enhanced mobile-friendly modal function
            openPaymentModal(bookingId);
            
            // Load booking amount
            loadBookingAmount(bookingId);
        }

        // Load booking amount for payment
        async function loadBookingAmount(bookingId) {
            try {
                const token = localStorage.getItem('token');
                const response = await fetch(`${API_BASE}/bookings/${bookingId}`, {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    document.getElementById('paymentAmount').textContent = `${data.booking.total_price || 0} บาท`;
                }
            } catch (error) {
                console.error('Load booking amount error:', error);
            }
        }

        // Process payment
        async function processPayment() {
            if (!currentBookingId) return;
            
            const method = document.querySelector('input[name="paymentMethod"]:checked').value;
            
            // For cash payment, use simple JSON request
            if (method === 'cash') {
                try {
                    const token = localStorage.getItem('token');
                    const response = await fetch(`${API_BASE}/bookings/${currentBookingId}/payment`, {
                        method: 'POST',
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            method,
                            transaction_id: null
                        })
                    });
                    
                    if (response.ok) {
                        const data = await response.json();
                        showToast(data.message || 'ชำระเงินสำเร็จ', 'success');
                        closeModal('paymentModal');
                        loadMyBookings();
                        loadAllBookings();
                    } else {
                        const error = await response.json();
                        showToast(error.error || 'เกิดข้อผิดพลาด', 'error');
                    }
                } catch (error) {
                    console.error('Payment error:', error);
                    showToast('เกิดข้อผิดพลาดในการชำระเงิน', 'error');
                }
                return;
            }
            
            // For bank_transfer and qr_code, process with file upload
            processTraditionalPayment();
        }

        // Close modal
        function closeModal(modalId) {
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.style.display = 'none';
                
                // Reset form data when closing specific modals
                if (modalId === 'paymentModal') {
                    const cashRadio = document.querySelector('input[name="paymentMethod"][value="cash"]');
                    if (cashRadio) cashRadio.checked = true;
                    
                    // Reset file upload
                    clearFilePreview();
                } else if (modalId === 'bookingModal') {
                    // Reset booking form if needed
                    document.getElementById('modalBody').innerHTML = '';
                }
            }
        }

        // View booking (legacy function - kept for compatibility)
        function viewBooking(bookingId) {
            viewBookingDetails(bookingId);
        }

        // Cancel booking
        async function cancelBooking(bookingId) {
            if (!confirm('คุณต้องการยกเลิกการจองนี้หรือไม่?')) return;
            
            try {
                const token = localStorage.getItem('token');
                const response = await fetch(`${API_BASE}/bookings/${bookingId}/cancel`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                
                const data = await response.json();
                
                if (response.ok && data.success) {
                    showToast(data.message || 'ยกเลิกการจองสำเร็จ', 'success');
                    loadMyBookings();
                    loadAllBookings();
                    loadAvailableRooms();
                } else {
                    showToast(data.message || data.error || 'เกิดข้อผิดพลาดในการยกเลิก', 'error');
                }
            } catch (error) {
                console.error('Cancel booking error:', error);
                showToast('เกิดข้อผิดพลาดในการยกเลิก', 'error');
            }
        }

        // Show toast message
        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.className = `toast toast-${type}`;
            toast.innerHTML = `
                <i class="fas ${type === 'success' ? 'fa-check-circle' : type === 'error' ? 'fa-exclamation-circle' : 'fa-info-circle'}"></i>
                <span>${message}</span>
            `;
            
            document.getElementById('toastContainer').appendChild(toast);
            
            setTimeout(() => {
                toast.style.opacity = '0';
                setTimeout(() => toast.remove(), 300);
            }, 3000);
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modals = ['bookingModal', 'bookingDetailsModal', 'paymentModal'];
            modals.forEach(modalId => {
                const modal = document.getElementById(modalId);
                if (modal && event.target === modal) {
                    closeModal(modalId);
                }
            });
        }

        // Close modal with ESC key
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                const modals = ['bookingModal', 'bookingDetailsModal', 'paymentModal'];
                modals.forEach(modalId => {
                    const modal = document.getElementById(modalId);
                    if (modal && modal.style.display === 'block') {
                        closeModal(modalId);
                    }
                });
            }
        });

        // Event listeners for form updates
        ['startDate', 'startTime', 'endDate', 'endTime'].forEach(id => {
            document.getElementById(id).addEventListener('change', updateBookingSummary);
        });
        
        // Initialize current booking ID for payment
        let currentBookingId = null;
        
        // Stripe variables
        let stripe = null;
        let elements = null;
        let cardElement = null;
        let stripeConfig = null;
        let currentPaymentIntent = null;

        // Initialize Stripe
        async function initializeStripe() {
            try {
                // ดึง Stripe config
                const response = await fetch('/api/payments/config');
                stripeConfig = await response.json();
                
                if (stripeConfig.success && stripeConfig.publishableKey) {
                    stripe = Stripe(stripeConfig.publishableKey);
                    elements = stripe.elements();
                    
                    // สร้าง card element
                    cardElement = elements.create('card', {
                        style: {
                            base: {
                                fontSize: '16px',
                                color: '#424770',
                                '::placeholder': {
                                    color: '#aab7c4',
                                },
                            },
                            invalid: {
                                color: '#9e2146',
                            },
                        },
                    });
                    
                    cardElement.mount('#card-element');
                    
                    // Listen for realtime validation errors
                    cardElement.on('change', ({error}) => {
                        const displayError = document.getElementById('card-errors');
                        if (error) {
                            displayError.textContent = error.message;
                        } else {
                            displayError.textContent = '';
                        }
                    });
                }
            } catch (error) {
                console.error('Error initializing Stripe:', error);
            }
        }

        // Setup payment method listeners
        function setupPaymentMethodListeners() {
            const paymentMethods = document.querySelectorAll('input[name="paymentMethod"]');
            paymentMethods.forEach(method => {
                method.addEventListener('change', togglePaymentForms);
            });
        }

        // Toggle payment forms based on selected method
        function togglePaymentForms() {
            const selectedEl = document.querySelector('input[name="paymentMethod"]:checked');
            const selectedMethod = selectedEl ? selectedEl.value : null;
            const stripeForm = document.getElementById('stripePaymentForm');
            const traditionalForm = document.getElementById('traditionalPaymentForm');

            if (selectedMethod === 'stripe') {
                if (stripeForm) stripeForm.style.display = 'block';
                if (traditionalForm) traditionalForm.style.display = 'none';
            } else {
                if (stripeForm) stripeForm.style.display = 'none';
                if (traditionalForm) traditionalForm.style.display = 'block';
            }
        }

        // Enhanced processPayment function
        async function processPayment() {
            const selectedMethod = document.querySelector('input[name="paymentMethod"]:checked').value;
            
            if (selectedMethod === 'stripe') {
                await processStripePayment();
            } else {
                await processTraditionalPayment();
            }
        }

        // Process Stripe payment
        async function processStripePayment() {
            try {
                if (!stripe || !cardElement) {
                    showToast('ระบบชำระเงินไม่พร้อม กรุณาลองใหม่อีกครั้ง', 'error');
                    return;
                }

                const paymentButton = document.querySelector('button[onclick="processPayment()"]');
                paymentButton.disabled = true;
                paymentButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> กำลังดำเนินการ...';

                // สร้าง Payment Intent
                const response = await fetchWithAuth('/api/payments/create-payment-intent', {
                    method: 'POST',
                    body: JSON.stringify({
                        bookingId: currentBookingId
                    })
                });

                const result = await response.json();

                if (!result.success) {
                    throw new Error(result.message);
                }

                // ยืนยันการชำระเงิน
                const {error} = await stripe.confirmCardPayment(result.clientSecret, {
                    payment_method: {
                        card: cardElement,
                        billing_details: {
                            name: currentUser.name,
                            email: currentUser.email
                        }
                    }
                });

                if (error) {
                    console.error('Payment failed:', error);
                    showToast(`การชำระเงินไม่สำเร็จ: ${error.message}`, 'error');
                } else {
                    // ยืนยันการชำระเงินกับเซิร์ฟเวอร์
                    const confirmResponse = await fetchWithAuth('/api/payments/confirm', {
                        method: 'POST',
                        body: JSON.stringify({
                            paymentIntentId: result.paymentIntentId,
                            bookingId: currentBookingId
                        })
                    });

                    const confirmResult = await confirmResponse.json();

                    if (confirmResult.success) {
                        showToast('ชำระเงินสำเร็จ!', 'success');
                        closeModal('paymentModal');
                        loadMyBookings(); // Reload bookings
                    } else {
                        showToast('เกิดข้อผิดพลาดในการยืนยันการชำระเงิน', 'error');
                    }
                }

            } catch (error) {
                console.error('Error processing Stripe payment:', error);
                showToast(error.message || 'เกิดข้อผิดพลาดในการชำระเงิน', 'error');
            } finally {
                const paymentButton = document.querySelector('button[onclick="processPayment()"]');
                paymentButton.disabled = false;
                paymentButton.innerHTML = '<i class="fas fa-check"></i> ชำระเงิน';
            }
        }

        // Process traditional payment with file upload
        async function processTraditionalPayment() {
            try {
                const selectedMethod = document.querySelector('input[name="paymentMethod"]:checked').value;
                const fileInput = document.getElementById('paymentProofFile');
                
                // ตรวจสอบว่าจำเป็นต้องมีไฟล์หลักฐานหรือไม่
                if (!fileInput.files[0]) {
                    showToast('กรุณาแนบหลักฐานการชำระเงิน', 'error');
                    return;
                }

                // แสดง loading state
                const paymentButton = document.querySelector('.btn-success');
                const originalText = paymentButton.innerHTML;
                paymentButton.disabled = true;
                paymentButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> กำลังอัปโหลด...';

                // สร้าง FormData สำหรับส่งข้อมูลและไฟล์
                const formData = new FormData();
                formData.append('method', selectedMethod);
                formData.append('transaction_id', null); // ไม่ใช้เลขอ้างอิงแล้ว
                formData.append('paymentProof', fileInput.files[0]);

                const response = await fetch(`${API_BASE}/bookings/${currentBookingId}/payment`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    },
                    body: formData
                });

                const result = await response.json();

                if (response.ok) {
                    showToast(result.message || 'อัปโหลดหลักฐานสำเร็จ! รอการตรวจสอบ', 'success');
                    closeModal('paymentModal');
                    loadMyBookings();
                    loadAllBookings();
                } else {
                    showToast(result.error || 'เกิดข้อผิดพลาดในการอัปโหลด', 'error');
                }

                // Reset button state
                paymentButton.disabled = false;
                paymentButton.innerHTML = originalText;

            } catch (error) {
                console.error('Error processing payment:', error);
                showToast('เกิดข้อผิดพลาดในการชำระเงิน', 'error');
                
                // Reset button state
                const paymentButton = document.querySelector('.btn-success');
                paymentButton.disabled = false;
                paymentButton.innerHTML = '<i class="fas fa-check"></i> ชำระเงิน';
            }
        }

        // Load room information
        async function loadRoomInfo() {
            const container = document.getElementById('roomInfoContainer');
            try {
                const response = await fetch('/api/rooms');
                const rooms = await response.json();

                if (rooms.length === 0) {
                    container.innerHTML = '<p>ไม่มีห้องว่างในขณะนี้</p>';
                    return;
                }

                container.innerHTML = rooms.map(room => `
                    <div class="room-card">
                        <h4>${room.name}</h4>
                        <p><strong>ประเภท:</strong> ${room.type_name}</p>
                        <p><strong>ความจุ:</strong> ${room.capacity} คน</p>
                        <p><strong>สถานะ:</strong> ${room.status === 'available' ? 'ว่าง' : 'ไม่ว่าง'}</p>
                    </div>
                `).join('');
            } catch (error) {
                console.error('Error loading room info:', error);
                container.innerHTML = '<p>เกิดข้อผิดพลาดในการโหลดข้อมูลห้อง</p>';
            }
        }

        // Handle payment method change
        document.addEventListener('change', function(e) {
            if (e.target.name === 'paymentMethod') {
                const method = e.target.value;
                const stripeForm = document.getElementById('stripePaymentForm');
                const traditionalForm = document.getElementById('traditionalPaymentForm');
                const transferProofForm = document.getElementById('transferProofForm');
                
                if (method === 'stripe') {
                    stripeForm.style.display = 'block';
                    traditionalForm.style.display = 'none';
                    transferProofForm.style.display = 'none';
                } else {
                    stripeForm.style.display = 'none';
                    
                    // Show upload form for bank_transfer and qr_code (ไม่ต้องแสดง traditionalForm แล้ว)
                    if (method === 'bank_transfer' || method === 'qr_code') {
                        transferProofForm.style.display = 'block';
                        transferProofForm.classList.add('show');
                        document.getElementById('paymentProofFile').required = true;
                        
                        // Update button text based on method
                        const uploadBtn = document.querySelector('.upload-btn');
                        if (method === 'bank_transfer') {
                            uploadBtn.innerHTML = '<i class="fas fa-university"></i> อัปโหลดสลิปโอนเงิน';
                        } else if (method === 'qr_code') {
                            uploadBtn.innerHTML = '<i class="fas fa-qrcode"></i> อัปโหลดหน้าจอ QR Payment';
                        }
                        
                        console.log('Showing file upload for method:', method);
                    } else {
                        // For cash payment, hide upload form
                        transferProofForm.style.display = 'none';
                        transferProofForm.classList.remove('show');
                        document.getElementById('paymentProofFile').required = false;
                        
                        console.log('Hiding file upload for method:', method);
                    }
                }
            }
        });

        // Handle file upload preview
        document.getElementById('paymentProofFile').addEventListener('change', function(e) {
            const file = e.target.files[0];
            const fileNameDisplay = document.getElementById('fileName');
            const filePreview = document.getElementById('filePreview');
            const previewImage = document.getElementById('previewImage');
            const fileInfo = document.getElementById('fileInfo');
            
            if (file) {
                if (file.size > 5 * 1024 * 1024) { // 5MB limit
                    showToast('ขนาดไฟล์ต้องไม่เกิน 5MB', 'error');
                    e.target.value = '';
                    fileNameDisplay.textContent = 'ยังไม่ได้เลือกไฟล์';
                    fileNameDisplay.classList.remove('has-file');
                    filePreview.style.display = 'none';
                    return;
                }

                // Update file name display
                fileNameDisplay.textContent = file.name;
                fileNameDisplay.classList.add('has-file');
                
                // Update file info
                const fileSize = (file.size / 1024 / 1024).toFixed(2);
                fileInfo.textContent = `${file.name} (${fileSize} MB)`;
                
                // Show preview
                filePreview.style.display = 'block';
                
                if (file.type.startsWith('image/')) {
                    const reader = new FileReader();
                    reader.onload = function(event) {
                        previewImage.src = event.target.result;
                        previewImage.style.display = 'block';
                    };
                    reader.readAsDataURL(file);
                } else {
                    previewImage.style.display = 'none';
                }
            } else {
                fileNameDisplay.textContent = 'ยังไม่ได้เลือกไฟล์';
                fileNameDisplay.classList.remove('has-file');
                filePreview.style.display = 'none';
            }
        });

        // Clear file preview
        function clearFilePreview() {
            const fileInput = document.getElementById('paymentProofFile');
            const fileNameDisplay = document.getElementById('fileName');
            const filePreview = document.getElementById('filePreview');
            
            fileInput.value = '';
            fileNameDisplay.textContent = 'ยังไม่ได้เลือกไฟล์';
            fileNameDisplay.classList.remove('has-file');
            filePreview.style.display = 'none';
        }

        // Download Payment Slip PDF
        async function downloadPaymentSlip(bookingId) {
            try {
                const token = localStorage.getItem('token');
                if (!token) {
                    showToast('กรุณาเข้าสู่ระบบ', 'error');
                    return;
                }

                // Show loading toast
                showToast('กำลังสร้างไฟล์ PDF...', 'info');

                const response = await fetch(`${API_BASE}/bookings/${bookingId}/payment-slip`, {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (response.ok) {
                    // Get the PDF as blob
                    const blob = await response.blob();
                    
                    // Create download link
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `payment-slip-${bookingId}.pdf`;
                    document.body.appendChild(a);
                    a.click();
                    
                    // Cleanup
                    window.URL.revokeObjectURL(url);
                    document.body.removeChild(a);
                    
                    showToast('ดาวน์โหลดใบเสร็จสำเร็จ', 'success');
                    
                } else {
                    // Try to parse JSON error body for a helpful message
                    const contentType = response.headers.get('content-type') || '';
                    if (contentType.includes('application/json')) {
                        try {
                            const err = await response.json();
                            const msg = err.message || err.error || JSON.stringify(err);
                            showToast(msg || 'ไม่สามารถสร้างใบเสร็จได้', 'error');
                            return;
                        } catch (parseErr) {
                            console.warn('Failed to parse JSON error response', parseErr);
                        }
                    }

                    // Fallback messages based on status
                    if (response.status === 400) {
                        showToast('ไม่สามารถสร้างใบเสร็จได้ (คำขอไม่ถูกต้อง)', 'error');
                    } else if (response.status === 404) {
                        showToast('ไม่พบข้อมูลการจอง', 'error');
                    } else if (response.status === 403) {
                        showToast('ไม่มีสิทธิ์เข้าถึงข้อมูลนี้', 'error');
                    } else {
                        showToast('เกิดข้อผิดพลาดในการดาวน์โหลดใบเสร็จ (เซิร์ฟเวอร์)', 'error');
                    }
                    return;
                }
                
            } catch (error) {
                console.error('Error downloading payment slip:', error);
                showToast('เกิดข้อผิดพลาดในการดาวน์โหลดใบเสร็จ', 'error');
            }
        }
    </script>

    <!-- Booking Details Modal -->
    <div id="bookingDetailsModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3><i class="fas fa-info-circle"></i> รายละเอียดการจอง</h3>
                <span class="close" onclick="closeModal('bookingDetailsModal')">&times;</span>
            </div>
            <div class="modal-body" id="bookingDetailsBody">
                <!-- Booking details will be loaded here -->
            </div>
        </div>
    </div>

    <!-- Payment Modal -->
    <div id="paymentModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3><i class="fas fa-credit-card"></i> ชำระเงิน</h3>
                <button class="modal-close" onclick="closePaymentModal()" aria-label="ปิด">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <div class="payment-form">
                    <div class="form-group">
                        <label><i class="fas fa-money-bill"></i> จำนวนเงิน</label>
                        <div class="amount-display" id="paymentAmount">0 บาท</div>
                    </div>
                    <div class="form-group">
                        <label><i class="fas fa-credit-card"></i> วิธีการชำระเงิน</label>
                        <div class="payment-methods">
                            <label class="payment-method">
                                <input type="radio" name="paymentMethod" value="stripe" checked>
                                <i class="fas fa-credit-card"></i> บัตรเครดิต/PromptPay (Stripe)
                            </label>
                            <label class="payment-method">
                                <input type="radio" name="paymentMethod" value="cash">
                                <i class="fas fa-money-bill-wave"></i> เงินสด
                            </label>
                            <label class="payment-method">
                                <input type="radio" name="paymentMethod" value="bank_transfer">
                                <i class="fas fa-university"></i> โอนเงิน
                            </label>
                            <label class="payment-method">
                                <input type="radio" name="paymentMethod" value="qr_code">
                                <i class="fas fa-qrcode"></i> QR Code
                            </label>
                        </div>
                    </div>
                    <!-- Stripe Payment Form -->
                    <div id="stripePaymentForm" class="form-group" style="display: block;">
                        <label><i class="fas fa-credit-card"></i> ข้อมูลบัตร</label>
                        <div id="card-element" class="stripe-element">
                            <!-- Stripe Elements จะแสดงที่นี่ -->
                        </div>
                        <div id="card-errors" role="alert" class="error-message"></div>
                    </div>
                    
                    <!-- File Upload for Transfer Proof -->
                    <div id="transferProofForm" class="form-group" style="display: none;">
                        <label><i class="fas fa-camera"></i> อัปโหลดหลักฐานการชำระเงิน *</label>
                        
                        <!-- Enhanced File Upload Area -->
                        <div class="enhanced-file-upload">
                            <input type="file" id="paymentProofFile" accept="image/*,.pdf" style="display: none;" required>
                            <div class="upload-container">
                                <button type="button" class="btn btn-primary upload-btn" onclick="document.getElementById('paymentProofFile').click()">
                                    <i class="fas fa-camera"></i> เลือกไฟล์สลิป
                                </button>
                                <div class="upload-info">
                                    <span id="fileName" class="file-name-display">ยังไม่ได้เลือกไฟล์</span>
                                    <small class="upload-hint">
                                        📱 ถ่ายรูปสลิป หรือ แคปหน้าจอ QR Payment
                                    </small>
                                </div>
                            </div>
                        </div>
                        
                        <!-- File Preview -->
                        <div id="filePreview" class="file-preview-enhanced" style="display: none;">
                            <div class="preview-header">
                                <div class="file-details">
                                    <i class="fas fa-file-image text-success"></i>
                                    <span id="fileInfo" class="file-info-text"></span>
                                </div>
                                <button type="button" class="btn btn-sm btn-outline-danger" onclick="clearFilePreview()" title="ลบไฟล์">
                                    <i class="fas fa-trash-alt"></i>
                                </button>
                            </div>
                            <div class="preview-content">
                                <img id="previewImage" class="preview-image" style="display: none;">
                            </div>
                        </div>
                        
                        <div class="upload-tips">
                            <small class="text-muted">
                                <i class="fas fa-info-circle"></i> รองรับไฟล์: JPG, PNG, PDF • ขนาดสูงสุด: 5MB
                            </small>
                        </div>
                    </div>
                    <div class="form-actions">
                        <button type="button" class="btn btn-success" onclick="processPayment()">
                            <i class="fas fa-check"></i> ชำระเงิน
                        </button>
                        <button type="button" class="btn btn-secondary" onclick="closePaymentModal()">
                            <i class="fas fa-times"></i> ยกเลิก
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Mobile Enhancements Script -->
    <script src="/stylesheets/mobile-enhancements.js"></script>
</body>
</html>