<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ระบบจองห้อง - Junrai Karaoke</title>
    <link rel="stylesheet" href="/css/global.css">
    <link rel="stylesheet" href="/css/bookings.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://js.stripe.com/v3/"></script>
    <script src="/js/legacy/timeSlotBooking.js"></script>
</head>
<body>
    <!-- Navigation -->
    <!-- Navigation -->
    <%- include('partials/navbar') %>
    
    <!-- Store Hours Info Section -->
    <div class="container">
    </div>

    <div class="container mt-4">
        <!-- Page Header -->
        <div class="page-header">
            <h1><i class="fas fa-calendar-alt"></i> ระบบจองห้องคาราโอเกะ</h1>
            <p>จองห้องคาราโอเกะและดูรายการการจองของคุณ</p>
        </div>

        <!-- Booking Tabs -->
        <div class="tab-container">
            <div class="tab-nav">
                <button class="tab-btn active" onclick="showTab('booking')">
                    <i class="fas fa-plus-circle"></i>
                    จองห้องใหม่
                </button>
                <button class="tab-btn" onclick="showTab('mybookings')" id="myBookingsTab" style="display: none;">
                    <i class="fas fa-list"></i>
                    การจองของฉัน
                </button>
                <button class="tab-btn" onclick="showTab('allbookings')" id="allBookingsTab" style="display: none;">
                    <i class="fas fa-users"></i>
                    การจองทั้งหมด
                </button>
            </div>

            <!-- New Booking Tab -->
            <div class="tab-content active" id="bookingTab">
                <div id="booking-container" class="booking-form-container">
                    <div class="room-selection">
                        <h3><i class="fas fa-door-open"></i> เลือกห้อง</h3>
                        <div class="form-group">
                            <select class="form-control" id="room_id">
                                <option value="">เลือกห้อง...</option>
                            </select>
                        </div>
                    </div>

                    <div class="booking-details" id="bookingForm">
                        <h3><i class="fas fa-calendar-check"></i> รายละเอียดการจอง</h3>
                        
                        <!-- Date Selection -->
                        <div class="date-selection">
                            <label class="form-label">
                                <i class="fas fa-calendar"></i>
                                เลือกวันที่
                            </label>
                            <input type="date" class="form-control" id="booking_date">
                        </div>
                        
                        <!-- Loading Indicator -->
                        <div id="loading-indicator" class="loading" style="display: none;">
                            <div class="spinner"></div>
                            <p>กำลังโหลดช่วงเวลา...</p>
                        </div>
                        
                        <!-- Time Slots Grid -->
                        <div class="time-slots-section" id="time-slots-section">
                            <div class="section-header">
                                <h4><i class="fas fa-clock"></i> เลือกช่วงเวลา</h4>
                                <div class="legend">
                                    <span class="legend-item">
                                        <span class="legend-dot available"></span> ว่าง
                                    </span>
                                    <span class="legend-item">
                                        <span class="legend-dot booked"></span> จองแล้ว
                                    </span>
                                    <span class="legend-item">
                                        <span class="legend-dot selected"></span> เลือกแล้ว
                                    </span>
                                    <span class="legend-item">
                                        <span class="legend-dot past"></span> ผ่านไปแล้ว
                                    </span>
                                </div>
                            </div>
                            
                            <div class="time-slots-grid" id="time-slots-grid">
                                <div class="no-slots-message">
                                    <p>กรุณาเลือกห้องและวันที่เพื่อดูช่วงเวลาที่ว่าง</p>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Selected Slot Summary -->
                        <div class="selected-slot-summary" id="selected-slot-summary" style="display: none;">
                            <div class="summary-card">
                                <h4><i class="fas fa-check-circle"></i> ช่วงเวลาที่เลือก</h4>
                                <div class="summary-row">
                                    <span class="summary-label">จำนวนช่วงเวลา:</span>
                                    <span id="selected-slots-count">0</span> ช่วง
                                </div>
                                <div class="summary-row">
                                    <span class="summary-label">เวลา:</span>
                                    <span id="selected-time-range">-</span>
                                </div>
                                <div class="summary-row">
                                    <span class="summary-label">ระยะเวลา:</span>
                                    <span id="total-duration">0 ชั่วโมง</span>
                                </div>
                                <div class="summary-row">
                                    <span class="summary-label">ราคาประมาณ:</span>
                                    <span id="total-price">0 บาท</span>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Booking Actions -->
                        <div class="form-actions" id="booking-actions" style="display: none;">
                            <button type="button" class="btn btn-secondary" id="clear-selection">
                                <i class="fas fa-times"></i>
                                ล้างการเลือก
                            </button>
                            <button type="button" class="btn btn-primary" id="book-button">
                                <i class="fas fa-check-circle"></i>
                                ยืนยันการจอง
                            </button>
                        </div>
                        
                        <!-- Error/Success Messages -->
                        <div id="error-message" class="booking-messages" style="display: none;">
                            <!-- Messages will be displayed here -->
                        </div>
                    </div>
                </div>
            </div>

            <!-- My Bookings Tab -->
            <div class="tab-content" id="mybookingsTab">
                <div class="bookings-list" id="myBookingsList">
                    <div class="loading">
                        <div class="spinner"></div>
                        <p>กำลังโหลดการจองของคุณ...</p>
                    </div>
                </div>
            </div>

            <!-- All Bookings Tab (Admin) -->
            <div class="tab-content" id="allbookingsTab">
                <div class="admin-controls">
                    <div class="filter-controls">
                        <select id="statusFilter" onchange="filterAllBookings()" class="form-select">
                            <option value="">สถานะทั้งหมด</option>
                            <option value="active">กำลังใช้งาน</option>
                            <option value="completed">เสร็จสิ้น</option>
                            <option value="cancelled">ยกเลิก</option>
                        </select>
                        
                        <select id="roomFilter" onchange="filterAllBookings()" class="form-select">
                            <option value="">ห้องทั้งหมด</option>
                        </select>
                    </div>
                </div>
                
                <div class="bookings-list" id="allBookingsList">
                    <div class="loading">
                        <div class="spinner"></div>
                        <p>กำลังโหลดการจองทั้งหมด...</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Booking Detail Modal -->
    <div class="modal-overlay" id="bookingModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 id="modalTitle">รายละเอียดการจอง</h3>
                <button class="modal-close" onclick="closeModal('bookingModal')">&times;</button>
            </div>
            <div class="modal-body" id="modalBody">
                <!-- Content will be loaded here -->
            </div>
        </div>
    </div>

    <!-- Success/Error Messages -->
    <div class="toast-container" id="toastContainer"></div>

    <script>
        // Global variables
        let currentUser = null;
        let availableRooms = [];
        let allRooms = [];
        let myBookings = [];
        let allBookings = [];
        const API_BASE = '/api';

        // Initialize page
        document.addEventListener('DOMContentLoaded', () => {
            checkAuth();
            loadAvailableRooms();
            initializeStripe();
            setupPaymentMethodListeners();
            
            // The timeSlotBooking.js will initialize automatically
        });

        // Authentication check
        function checkAuth() {
            const token = localStorage.getItem('token');
            const user = localStorage.getItem('user');
            
            if (token && user) {
                currentUser = JSON.parse(user);
                document.getElementById('authLink').style.display = 'none';
                document.getElementById('logoutBtn').style.display = 'block';
                document.getElementById('myBookingsTab').style.display = 'block';
                
                // Show admin tab
                if (currentUser.role_id === 1) {
                    document.getElementById('allBookingsTab').style.display = 'block';
                }
            } else {
                // Redirect to login if not authenticated
                window.location.href = '/auth';
            }
        }

        // Logout function
        function logout() {
            localStorage.removeItem('token');
            localStorage.removeItem('user');
            window.location.href = '/auth';
        }

        // Handle authentication errors
        function handleAuthError(response) {
            if (response.status === 401 || response.status === 403) {
                showError('Session หมดอายุ กรุณาเข้าสู่ระบบใหม่');
                setTimeout(() => {
                    logout();
                }, 2000);
                return true;
            }
            return false;
        }

        // Enhanced fetch with auth error handling
        async function fetchWithAuth(url, options = {}) {
            const token = localStorage.getItem('token');
            const response = await fetch(url, {
                ...options,
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`,
                    ...options.headers
                }
            });

            if (handleAuthError(response)) {
                throw new Error('Authentication failed');
            }

            return response;
        }

        // Set default date for time slot booking
        function setDefaultDateTime() {
            const bookingDateInput = document.getElementById('booking_date');
            if (bookingDateInput) {
                const tomorrow = new Date();
                tomorrow.setDate(tomorrow.getDate() + 1);
                const tomorrowStr = tomorrow.toISOString().split('T')[0];
                bookingDateInput.value = tomorrowStr;
            }
        }

        // Tab management
        function showTab(tabName) {
            // Hide all tabs
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            
            // Show selected tab
            document.getElementById(tabName + 'Tab').classList.add('active');
            event.target.classList.add('active');
            
            // Load data based on tab
            switch(tabName) {
                case 'mybookings':
                    loadMyBookings();
                    break;
                case 'allbookings':
                    loadAllBookings();
                    loadRoomsForFilter();
                    break;
            }
        }

        // Load available rooms
        async function loadAvailableRooms() {
            try {
                const response = await fetch(`${API_BASE}/rooms/roomForm`);
                if (response.ok) {
                    allRooms = await response.json();
                    populateRoomSelect();
                } else {
                    throw new Error('Failed to load rooms');
                }
            } catch (error) {
                console.error('Error loading rooms:', error);
                showError('ไม่สามารถโหลดข้อมูลห้องได้');
            }
        }

        // Populate room select dropdown
        function populateRoomSelect() {
            const roomSelect = document.getElementById('room_id');
            if (!roomSelect) return;

            // Clear existing options except the first one
            roomSelect.innerHTML = '<option value="">เลือกห้อง...</option>';

            allRooms.forEach(room => {
                const option = document.createElement('option');
                option.value = room.room_id;
                option.textContent = `${room.name} - ${room.type_name || 'ไม่ระบุประเภท'} (${room.price_per_hour} บาท/ชั่วโมง)`;
                roomSelect.appendChild(option);
            });
        }

        // อัปเดตสถานะห้องแบบ real-time
        async function updateRoomStatus() {
            try {
                await fetch(`${API_BASE}/rooms/update-status`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
            } catch (error) {
                console.error('Error updating room status:', error);
            }
        }

        // Display available rooms
        function displayAvailableRooms() {
            const container = document.getElementById('availableRooms');
            
            if (availableRooms.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-door-closed"></i>
                        <h3>ไม่มีห้องว่าง</h3>
                        <p>ขณะนี้ไม่มีห้องว่างให้บริการ</p>
                    </div>
                `;
                return;
            }

            container.innerHTML = availableRooms.map(room => `
                <div class="room-card" onclick="selectRoom(${room.room_id})">
                    <div class="room-status available">
                        <i class="fas fa-check-circle"></i>
                        ว่าง
                    </div>
                    
                    <div class="room-info">
                        <h4><i class="fas fa-door-open"></i> ${room.name}</h4>
                        <p><i class="fas fa-tags"></i> ${room.type_name || 'ไม่ระบุประเภท'}</p>
                        <p><i class="fas fa-users"></i> ${room.capacity || 'ไม่ระบุ'} คน</p>
                    </div>
                    
                    <button class="btn btn-primary">เลือกห้องนี้</button>
                </div>
            `).join('');
        }

        // Select room for booking
        function selectRoom(roomId) {
            const room = availableRooms.find(r => r.room_id === roomId);
            if (!room) return;
            
            document.getElementById('selectedRoomId').value = roomId;
            document.getElementById('selectedRoomInfo').innerHTML = `
                <div class="selected-room">
                    <h4><i class="fas fa-door-open"></i> ${room.name}</h4>
                    <div class="room-details">
                        <span><i class="fas fa-tags"></i> ${room.type_name || 'ไม่ระบุประเภท'}</span>
                        <span><i class="fas fa-users"></i> ${room.capacity || 'ไม่ระบุ'} คน</span>
                    </div>
                </div>
            `;
            
            document.getElementById('bookingForm').style.display = 'block';
            document.getElementById('bookingForm').scrollIntoView({ behavior: 'smooth' });
            
            updateBookingSummary();
        }

        // Update booking summary
        function updateBookingSummary() {
            const startDate = document.getElementById('startDate').value;
            const startTime = document.getElementById('startTime').value;
            const endDate = document.getElementById('endDate').value;
            const endTime = document.getElementById('endTime').value;
            
            if (startDate && startTime && endDate && endTime) {
                const start = new Date(`${startDate}T${startTime}`);
                const end = new Date(`${endDate}T${endTime}`);
                const duration = (end - start) / (1000 * 60 * 60); // hours
                
                document.getElementById('bookingSummary').innerHTML = `
                    <div class="summary-card">
                        <h4><i class="fas fa-clock"></i> สรุปการจอง</h4>
                        <div class="summary-details">
                            <div class="summary-item">
                                <span>เริ่ม:</span>
                                <span>${formatDateTime(start)}</span>
                            </div>
                            <div class="summary-item">
                                <span>สิ้นสุด:</span>
                                <span>${formatDateTime(end)}</span>
                            </div>
                            <div class="summary-item">
                                <span>ระยะเวลา:</span>
                                <span>${duration.toFixed(1)} ชั่วโมง</span>
                            </div>
                        </div>
                    </div>
                `;
            }
        }

        // Format date time
        function formatDateTime(date) {
            return date.toLocaleString('th-TH', {
                weekday: 'short',
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }

        // Handle booking form submission
        const newBookingForm = document.getElementById('newBookingForm');
        if (newBookingForm) {
            newBookingForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const roomId = document.getElementById('selectedRoomId').value;
            const startDate = document.getElementById('startDate').value;
            const startTime = document.getElementById('startTime').value;
            const endDate = document.getElementById('endDate').value;
            const endTime = document.getElementById('endTime').value;
            
            const startDateTime = `${startDate}T${startTime}:00`;
            const endDateTime = `${endDate}T${endTime}:00`;
            
            // Validation
            const start = new Date(startDateTime);
            const end = new Date(endDateTime);
            const now = new Date();
            
            if (start <= now) {
                showToast('เวลาเริ่มต้องเป็นในอนาคต', 'error');
                return;
            }
            
            if (end <= start) {
                showToast('เวลาสิ้นสุดต้องหลังจากเวลาเริ่ม', 'error');
                return;
            }
            
            try {
                const token = localStorage.getItem('token');
                const response = await fetch(`${API_BASE}/bookings`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify({
                        room_id: parseInt(roomId),
                        start_time: startDateTime,
                        end_time: endDateTime
                    })
                });
                
                const data = await response.json();
                
                if (response.ok && data.success) {
                    showToast(data.message || 'จองห้องสำเร็จ!', 'success');
                    resetBookingForm();
                    loadAvailableRooms(); // Refresh available rooms
                    
                    // Switch to my bookings tab
                    setTimeout(() => {
                        showTab('mybookings');
                        document.querySelector('[onclick="showTab(\'mybookings\')"]').click();
                    }, 2000);
                } else {
                    // Handle room conflict errors with detailed information
                    if (data.conflicts && data.conflicts.length > 0) {
                        let errorMsg = data.message;
                        if (data.suggestion) {
                            errorMsg += '\n\n' + data.suggestion;
                            errorMsg += '\n\nต้องการจองล่วงหน้าหรือไม่?';
                        }
                        showToast(errorMsg, 'error');
                    } else {
                        showToast(data.message || data.error || 'เกิดข้อผิดพลาดในการจอง', 'error');
                    }
                }
            } catch (error) {
                console.error('Booking error:', error);
                showToast('เกิดข้อผิดพลาดในการจอง', 'error');
            }
            });
        }

        // Reset booking form  
        function resetBookingForm() {
            const bookingForm = document.getElementById('newBookingForm');
            if (bookingForm) bookingForm.reset();
            
            // Reset time slot booking system
            if (window.timeSlotBooking) {
                window.timeSlotBooking.clearSelection();
            }
        }

        // Load my bookings
        async function loadMyBookings() {
            try {
                const token = localStorage.getItem('token');
                const response = await fetch(`${API_BASE}/bookings`, {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    myBookings = data.bookings;
                    displayBookings(myBookings, 'myBookingsList');
                } else {
                    throw new Error('Failed to load bookings');
                }
            } catch (error) {
                console.error('Error loading my bookings:', error);
                document.getElementById('myBookingsList').innerHTML = `
                    <div class="error-message">
                        <i class="fas fa-exclamation-triangle"></i>
                        <p>ไม่สามารถโหลดการจองได้</p>
                    </div>
                `;
            }
        }

        // Load all bookings (admin)
        async function loadAllBookings() {
            try {
                const token = localStorage.getItem('token');
                const response = await fetch(`${API_BASE}/bookings`, {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    allBookings = data.bookings;
                    displayBookings(allBookings, 'allBookingsList');
                } else {
                    throw new Error('Failed to load all bookings');
                }
            } catch (error) {
                console.error('Error loading all bookings:', error);
                document.getElementById('allBookingsList').innerHTML = `
                    <div class="error-message">
                        <i class="fas fa-exclamation-triangle"></i>
                        <p>ไม่สามารถโหลดการจองได้</p>
                    </div>
                `;
            }
        }

        // Display bookings
        function displayBookings(bookings, containerId) {
            const container = document.getElementById(containerId);
            
            if (bookings.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-calendar-times"></i>
                        <h3>ไม่มีการจอง</h3>
                        <p>ยังไม่มีการจองในระบบ</p>
                    </div>
                `;
                return;
            }

            container.innerHTML = bookings.map(booking => `
                <div class="booking-card ${booking.status}" onclick="viewBooking(${booking.booking_id})">
                    <div class="booking-header">
                        <div class="booking-status ${booking.status}">
                            <i class="fas ${getStatusIcon(booking.status)}"></i>
                            ${getStatusText(booking.status)}
                        </div>
                        <div class="booking-id">#${booking.booking_id}</div>
                    </div>
                    
                    <div class="booking-body">
                        <h4><i class="fas fa-door-open"></i> ${booking.room_name}</h4>
                        <div class="room-details">
                            <span class="room-type">${booking.type_name || 'ห้องธรรมดา'}</span>
                            <span class="room-capacity"><i class="fas fa-users"></i> ${booking.capacity || 4} คน</span>
                        </div>
                        <div class="booking-info">
                            <div class="info-item">
                                <i class="fas fa-user"></i>
                                <span>${booking.user_name}</span>
                            </div>
                            <div class="info-item">
                                <i class="fas fa-calendar"></i>
                                <span>${formatDateTime(new Date(booking.start_time))}</span>
                            </div>
                            <div class="info-item">
                                <i class="fas fa-clock"></i>
                                <span>${formatDateTime(new Date(booking.end_time))}</span>
                            </div>
                            <div class="info-item">
                                <i class="fas fa-hourglass-half"></i>
                                <span>${booking.duration_hours || 1} ชั่วโมง</span>
                            </div>
                            <div class="info-item price">
                                <i class="fas fa-money-bill-wave"></i>
                                <span>${booking.total_price || 0} บาท</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="booking-footer">
                        ${booking.status === 'active' && (currentUser.user_id === booking.user_id || currentUser.role_id === 1) ? `
                        <button class="btn btn-warning btn-sm" onclick="event.stopPropagation(); cancelBooking(${booking.booking_id})">
                            <i class="fas fa-times"></i>
                            ยกเลิก
                        </button>
                        ` : ''}
                        
                        <button class="btn btn-outline btn-sm" onclick="event.stopPropagation(); viewBookingDetails(${booking.booking_id})">
                            <i class="fas fa-eye"></i>
                            ดูรายละเอียด
                        </button>
                        
                        ${booking.status === 'active' && booking.payment_status === 'pending' && (currentUser.user_id === booking.user_id || currentUser.role_id === 1) ? `
                        <button class="btn btn-success btn-sm" onclick="event.stopPropagation(); showPaymentModal(${booking.booking_id})">
                            <i class="fas fa-credit-card"></i>
                            ชำระเงิน
                        </button>
                        ` : ''}
                        
                        ${booking.payment_status === 'paid' ? `
                        <span class="payment-status paid">
                            <i class="fas fa-check-circle"></i>
                            ชำระแล้ว
                        </span>
                        ` : booking.payment_status === 'pending' ? `
                        <span class="payment-status pending">
                            <i class="fas fa-clock"></i>
                            รอชำระเงิน
                        </span>
                        ` : ''}
                    </div>
                </div>
            `).join('');
        }

        // Get status icon
        function getStatusIcon(status) {
            switch(status) {
                case 'active': return 'fa-clock';
                case 'completed': return 'fa-check-circle';
                case 'cancelled': return 'fa-times-circle';
                default: return 'fa-question-circle';
            }
        }

        // Get status text
        function getStatusText(status) {
            switch(status) {
                case 'active': return 'กำลังใช้งาน';
                case 'confirmed': return 'ชำระเงินแล้ว';
                case 'completed': return 'เสร็จสิ้น';
                case 'cancelled': return 'ยกเลิก';
                default: return 'ไม่ทราบสถานะ';
            }
        }

        // View booking details
        async function viewBookingDetails(bookingId) {
            try {
                const token = localStorage.getItem('token');
                const response = await fetch(`${API_BASE}/bookings/${bookingId}`, {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    showBookingDetailsModal(data.booking);
                } else {
                    showToast('ไม่สามารถโหลดรายละเอียดการจองได้', 'error');
                }
            } catch (error) {
                console.error('View booking error:', error);
                showToast('เกิดข้อผิดพลาดในการโหลดรายละเอียด', 'error');
            }
        }

        // Show booking details modal
        function showBookingDetailsModal(booking) {
            const modal = document.getElementById('bookingDetailsModal');
            const modalBody = document.getElementById('bookingDetailsBody');
            
            modalBody.innerHTML = `
                <div class="booking-details">
                    <div class="detail-row">
                        <strong><i class="fas fa-door-open"></i> ห้อง:</strong>
                        <span>${booking.room_name}</span>
                    </div>
                    <div class="detail-row">
                        <strong><i class="fas fa-tag"></i> ประเภทห้อง:</strong>
                        <span>${booking.type_name || 'ห้องธรรมดา'}</span>
                    </div>
                    <div class="detail-row">
                        <strong><i class="fas fa-users"></i> ขนาดห้อง:</strong>
                        <span>${booking.capacity || 4} คน</span>
                    </div>
                    <div class="detail-row">
                        <strong><i class="fas fa-money-bill-wave"></i> ราคาต่อชั่วโมง:</strong>
                        <span>${booking.price_per_hour || 0} บาท</span>
                    </div>
                    <div class="detail-row">
                        <strong><i class="fas fa-calendar"></i> วันเวลาเริ่ม:</strong>
                        <span>${formatDateTime(new Date(booking.start_time))}</span>
                    </div>
                    <div class="detail-row">
                        <strong><i class="fas fa-calendar-check"></i> วันเวลาสิ้นสุด:</strong>
                        <span>${formatDateTime(new Date(booking.end_time))}</span>
                    </div>
                    <div class="detail-row">
                        <strong><i class="fas fa-hourglass-half"></i> ระยะเวลาการใช้งาน:</strong>
                        <span>${booking.duration_hours || 1} ชั่วโมง</span>
                    </div>
                    <div class="detail-row total-price">
                        <strong><i class="fas fa-receipt"></i> ราคารวม:</strong>
                        <span>${booking.total_price || 0} บาท</span>
                    </div>
                    <div class="detail-row">
                        <strong><i class="fas fa-info-circle"></i> สถานะห้อง:</strong>
                        <span class="status-badge ${booking.room_status}">
                            ${booking.room_status === 'available' ? 'ว่าง' : 'ถูกจองแล้ว'}
                        </span>
                    </div>
                    <div class="detail-row">
                        <strong><i class="fas fa-credit-card"></i> สถานะการชำระเงิน:</strong>
                        <span class="payment-badge ${booking.payment_status}">
                            ${getPaymentStatusText(booking.payment_status)}
                        </span>
                    </div>
                </div>
            `;
            
            modal.style.display = 'block';
        }

        // Get payment status text
        function getPaymentStatusText(status) {
            switch(status) {
                case 'paid': return 'ชำระแล้ว';
                case 'pending': return 'รอชำระเงิน';
                case 'failed': return 'ชำระไม่สำเร็จ';
                default: return 'ไม่ทราบสถานะ';
            }
        }

        // Show payment modal
        function showPaymentModal(bookingId) {
            currentBookingId = bookingId;
            const modal = document.getElementById('paymentModal');
            const modalBody = modal.querySelector('.modal-body');
            
            modal.style.display = 'block';
            
            // Reset scroll position to top
            if (modalBody) {
                modalBody.scrollTop = 0;
            }
            
            // Add CSS class for mobile scroll detection
            if (window.innerWidth <= 480) {
                modal.classList.add('mobile-modal');
                // Prevent body scroll when modal is open
                document.body.style.overflow = 'hidden';
            }
            
            // Load booking amount
            loadBookingAmount(bookingId);
            
            // Focus on the modal for accessibility
            modal.focus();
        }

        // Load booking amount for payment
        async function loadBookingAmount(bookingId) {
            try {
                const token = localStorage.getItem('token');
                const response = await fetch(`${API_BASE}/bookings/${bookingId}`, {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    document.getElementById('paymentAmount').textContent = `${data.booking.total_price || 0} บาท`;
                }
            } catch (error) {
                console.error('Load booking amount error:', error);
            }
        }

        // Process payment
        async function processPayment() {
            if (!currentBookingId) return;
            
            const method = document.querySelector('input[name="paymentMethod"]:checked').value;
            const transactionId = document.getElementById('transactionId').value;
            
            try {
                const token = localStorage.getItem('token');
                const response = await fetch(`${API_BASE}/bookings/${currentBookingId}/payment`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        method,
                        transaction_id: transactionId || null
                    })
                });
                
                if (response.ok) {
                    const data = await response.json();
                    showToast(data.message || 'ชำระเงินสำเร็จ', 'success');
                    closeModal('paymentModal');
                    loadMyBookings();
                    loadAllBookings();
                } else {
                    const data = await response.json();
                    showToast(data.error || 'เกิดข้อผิดพลาดในการชำระเงิน', 'error');
                }
            } catch (error) {
                console.error('Payment error:', error);
                showToast('เกิดข้อผิดพลาดในการชำระเงิน', 'error');
            }
        }

        // Close modal
        function closeModal(modalId) {
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.style.display = 'none';
                
                // Remove mobile modal class and restore body scroll
                if (modal.classList.contains('mobile-modal')) {
                    modal.classList.remove('mobile-modal');
                    document.body.style.overflow = 'auto';
                }
                
                // Reset form data when closing specific modals
                if (modalId === 'paymentModal') {
                    const transactionInput = document.getElementById('transactionId');
                    const cashRadio = document.querySelector('input[name="paymentMethod"][value="cash"]');
                    if (transactionInput) transactionInput.value = '';
                    if (cashRadio) cashRadio.checked = true;
                } else if (modalId === 'bookingModal') {
                    // Reset booking form if needed
                    const modalBody = document.getElementById('modalBody');
                    if (modalBody) modalBody.innerHTML = '';
                }
            }
        }

        // View booking (legacy function - kept for compatibility)
        function viewBooking(bookingId) {
            viewBookingDetails(bookingId);
        }

        // Cancel booking
        async function cancelBooking(bookingId) {
            if (!confirm('คุณต้องการยกเลิกการจองนี้หรือไม่?')) return;
            
            try {
                const token = localStorage.getItem('token');
                const response = await fetch(`${API_BASE}/bookings/${bookingId}/cancel`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                
                const data = await response.json();
                
                if (response.ok && data.success) {
                    showToast(data.message || 'ยกเลิกการจองสำเร็จ', 'success');
                    loadMyBookings();
                    loadAllBookings();
                    loadAvailableRooms();
                } else {
                    showToast(data.message || data.error || 'เกิดข้อผิดพลาดในการยกเลิก', 'error');
                }
            } catch (error) {
                console.error('Cancel booking error:', error);
                showToast('เกิดข้อผิดพลาดในการยกเลิก', 'error');
            }
        }

        // Show toast message
        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.className = `toast toast-${type}`;
            toast.innerHTML = `
                <i class="fas ${type === 'success' ? 'fa-check-circle' : type === 'error' ? 'fa-exclamation-circle' : 'fa-info-circle'}"></i>
                <span>${message}</span>
            `;
            
            document.getElementById('toastContainer').appendChild(toast);
            
            setTimeout(() => {
                toast.style.opacity = '0';
                setTimeout(() => toast.remove(), 300);
            }, 3000);
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modals = ['bookingModal', 'bookingDetailsModal', 'paymentModal'];
            modals.forEach(modalId => {
                const modal = document.getElementById(modalId);
                if (modal && event.target === modal) {
                    closeModal(modalId);
                }
            });
        }

        // Close modal with ESC key
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                const modals = ['bookingModal', 'bookingDetailsModal', 'paymentModal'];
                modals.forEach(modalId => {
                    const modal = document.getElementById(modalId);
                    if (modal && modal.style.display === 'block') {
                        closeModal(modalId);
                    }
                });
            }
        });

        // Event listeners for form updates
        ['startDate', 'startTime', 'endDate', 'endTime'].forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                element.addEventListener('change', updateBookingSummary);
            }
        });
        
        // Initialize current booking ID for payment
        let currentBookingId = null;
        
        // Stripe variables
        let stripe = null;
        let elements = null;
        let cardElement = null;
        let stripeConfig = null;
        let currentPaymentIntent = null;

        // Initialize Stripe with error handling
        async function initializeStripe() {
            try {
                // ดึง Stripe config
                const response = await fetch('/api/payments/config');
                if (!response.ok) {
                    console.warn('Stripe config not available, payment features disabled');
                    return;
                }
                
                const config = await response.json();
                if (config.success && config.publishableKey) {
                    stripeConfig = config;
                    stripe = Stripe(stripeConfig.publishableKey);
                    elements = stripe.elements();
                    
                    // สร้าง card element
                    cardElement = elements.create('card', {
                        style: {
                            base: {
                                fontSize: '16px',
                                color: '#424770',
                                '::placeholder': {
                                    color: '#aab7c4',
                                },
                            },
                            invalid: {
                                color: '#9e2146',
                            },
                        },
                    });
                    
                    cardElement.mount('#card-element');
                    
                    // Listen for realtime validation errors
                    cardElement.on('change', ({error}) => {
                        const displayError = document.getElementById('card-errors');
                        if (error) {
                            displayError.textContent = error.message;
                        } else {
                            displayError.textContent = '';
                        }
                    });
                } else {
                    console.warn('Stripe configuration invalid');
                }
            } catch (error) {
                console.warn('Stripe initialization failed:', error.message);
                // Continue without Stripe - payment features will be disabled
            }
        }

        // Setup payment method listeners
        function setupPaymentMethodListeners() {
            const paymentMethods = document.querySelectorAll('input[name="paymentMethod"]');
            paymentMethods.forEach(method => {
                method.addEventListener('change', togglePaymentForms);
            });
        }

        // Toggle payment forms based on selected method
        function togglePaymentForms() {
            const selectedMethod = document.querySelector('input[name="paymentMethod"]:checked').value;
            const stripeForm = document.getElementById('stripePaymentForm');
            const traditionalForm = document.getElementById('traditionalPaymentForm');
            
            if (selectedMethod === 'stripe') {
                stripeForm.style.display = 'block';
                traditionalForm.style.display = 'none';
            } else {
                stripeForm.style.display = 'none';
                traditionalForm.style.display = 'block';
            }
        }

        // Enhanced processPayment function
        async function processPayment() {
            const selectedMethod = document.querySelector('input[name="paymentMethod"]:checked').value;
            
            if (selectedMethod === 'stripe') {
                await processStripePayment();
            } else {
                await processTraditionalPayment();
            }
        }

        // Process Stripe payment
        async function processStripePayment() {
            try {
                if (!stripe || !cardElement) {
                    showToast('ระบบชำระเงินไม่พร้อม กรุณาลองใหม่อีกครั้ง', 'error');
                    return;
                }

                const paymentButton = document.querySelector('button[onclick="processPayment()"]');
                paymentButton.disabled = true;
                paymentButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> กำลังดำเนินการ...';

                // สร้าง Payment Intent
                const response = await fetchWithAuth('/api/payments/create-payment-intent', {
                    method: 'POST',
                    body: JSON.stringify({
                        bookingId: currentBookingId
                    })
                });

                const result = await response.json();

                if (!result.success) {
                    throw new Error(result.message);
                }

                // ยืนยันการชำระเงิน
                const {error} = await stripe.confirmCardPayment(result.clientSecret, {
                    payment_method: {
                        card: cardElement,
                        billing_details: {
                            name: currentUser.name,
                            email: currentUser.email
                        }
                    }
                });

                if (error) {
                    console.error('Payment failed:', error);
                    showToast(`การชำระเงินไม่สำเร็จ: ${error.message}`, 'error');
                } else {
                    // ยืนยันการชำระเงินกับเซิร์ฟเวอร์
                    const confirmResponse = await fetchWithAuth('/api/payments/confirm', {
                        method: 'POST',
                        body: JSON.stringify({
                            paymentIntentId: result.paymentIntentId,
                            bookingId: currentBookingId
                        })
                    });

                    const confirmResult = await confirmResponse.json();

                    if (confirmResult.success) {
                        showToast('ชำระเงินสำเร็จ!', 'success');
                        closeModal('paymentModal');
                        loadMyBookings(); // Reload bookings
                    } else {
                        showToast('เกิดข้อผิดพลาดในการยืนยันการชำระเงิน', 'error');
                    }
                }

            } catch (error) {
                console.error('Error processing Stripe payment:', error);
                showToast(error.message || 'เกิดข้อผิดพลาดในการชำระเงิน', 'error');
            } finally {
                const paymentButton = document.querySelector('button[onclick="processPayment()"]');
                paymentButton.disabled = false;
                paymentButton.innerHTML = '<i class="fas fa-check"></i> ชำระเงิน';
            }
        }

        // Process traditional payment (existing logic)
        async function processTraditionalPayment() {
            try {
                const selectedMethod = document.querySelector('input[name="paymentMethod"]:checked').value;
                const transactionId = document.getElementById('transactionId').value;

                const response = await fetch(`${API_BASE}/bookings/${currentBookingId}/payment`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    },
                    body: JSON.stringify({
                        method: selectedMethod,
                        transactionId: transactionId
                    })
                });

                const result = await response.json();

                if (result.success) {
                    showToast('บันทึกการชำระเงินสำเร็จ!', 'success');
                    closeModal('paymentModal');
                    loadMyBookings();
                } else {
                    showToast(result.message || 'เกิดข้อผิดพลาดในการบันทึกการชำระเงิน', 'error');
                }

            } catch (error) {
                console.error('Error processing traditional payment:', error);
                showToast('เกิดข้อผิดพลาดในการชำระเงิน', 'error');
            }
        }
    </script>

    <!-- Booking Details Modal -->
    <div id="bookingDetailsModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3><i class="fas fa-info-circle"></i> รายละเอียดการจอง</h3>
                <span class="close" onclick="closeModal('bookingDetailsModal')">&times;</span>
            </div>
            <div class="modal-body" id="bookingDetailsBody">
                <!-- Booking details will be loaded here -->
            </div>
        </div>
    </div>

    <!-- Payment Modal -->
    <div id="paymentModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3><i class="fas fa-credit-card"></i> ชำระเงิน</h3>
                <span class="close" onclick="closeModal('paymentModal')">&times;</span>
            </div>
            <div class="modal-body">
                <div class="payment-form">
                    <div class="form-group">
                        <label><i class="fas fa-money-bill"></i> จำนวนเงิน</label>
                        <div class="amount-display" id="paymentAmount">0 บาท</div>
                    </div>
                    <div class="form-group">
                        <label><i class="fas fa-credit-card"></i> วิธีการชำระเงิน</label>
                        <div class="payment-methods">
                            <label class="payment-method">
                                <input type="radio" name="paymentMethod" value="stripe" checked>
                                <i class="fas fa-credit-card"></i> บัตรเครดิต/PromptPay (Stripe)
                            </label>
                            <label class="payment-method">
                                <input type="radio" name="paymentMethod" value="cash">
                                <i class="fas fa-money-bill-wave"></i> เงินสด
                            </label>
                            <label class="payment-method">
                                <input type="radio" name="paymentMethod" value="bank_transfer">
                                <i class="fas fa-university"></i> โอนเงิน
                            </label>
                            <label class="payment-method">
                                <input type="radio" name="paymentMethod" value="qr_code">
                                <i class="fas fa-qrcode"></i> QR Code
                            </label>
                        </div>
                    </div>
                    <!-- Stripe Payment Form -->
                    <div id="stripePaymentForm" class="form-group" style="display: block;">
                        <label><i class="fas fa-credit-card"></i> ข้อมูลบัตร</label>
                        <div id="card-element" class="stripe-element">
                            <!-- Stripe Elements จะแสดงที่นี่ -->
                        </div>
                        <div id="card-errors" role="alert" class="error-message"></div>
                    </div>
                    
                    <!-- Traditional Payment Form -->
                    <div id="traditionalPaymentForm" class="form-group" style="display: none;">
                        <label><i class="fas fa-receipt"></i> เลขอ้างอิง (ถ้ามี)</label>
                        <input type="text" id="transactionId" class="form-control" placeholder="ใส่เลขอ้างอิงการชำระเงิน">
                    </div>
                    <div class="form-actions">
                        <button type="button" class="btn btn-success" onclick="processPayment()">
                            <i class="fas fa-check"></i> ชำระเงิน
                        </button>
                        <button type="button" class="btn btn-secondary" onclick="closeModal('paymentModal')">
                            <i class="fas fa-times"></i> ยกเลิก
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>
</html>