const { promisePool } = require('./src/config/database');

async function debugOTPVerify() {
    try {
        console.log('\nüîç Debug OTP Verification');
        console.log('‚ïê'.repeat(80));
        
        // ‡∏î‡∏∂‡∏á OTP ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        const [rows] = await promisePool.query(
            'SELECT user_id, reset_otp, reset_otp_expires FROM users WHERE reset_otp IS NOT NULL ORDER BY reset_otp_expires DESC LIMIT 1'
        );
        
        if (rows.length === 0) {
            console.log('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ OTP ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
            return;
        }
        
        const user = rows[0];
        console.log('\nüìã OTP Data from Database:');
        console.log(`   User ID: ${user.user_id}`);
        console.log(`   OTP: ${user.reset_otp}`);
        console.log(`   Expires (raw): ${user.reset_otp_expires}`);
        console.log(`   Expires (type): ${typeof user.reset_otp_expires}`);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á
        const expiresDate = new Date(user.reset_otp_expires);
        console.log('\n‚è∞ Date Conversion:');
        console.log(`   new Date(expires): ${expiresDate}`);
        console.log(`   ISO String: ${expiresDate.toISOString()}`);
        console.log(`   Timestamp: ${expiresDate.getTime()}`);
        
        // ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        const now = new Date();
        console.log('\nüïê Current Time:');
        console.log(`   Date.now(): ${Date.now()}`);
        console.log(`   new Date(): ${now}`);
        console.log(`   ISO String: ${now.toISOString()}`);
        console.log(`   Timestamp: ${now.getTime()}`);
        
        // ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
        const diff = expiresDate.getTime() - now.getTime();
        const diffMinutes = Math.floor(diff / 1000 / 60);
        const diffSeconds = Math.floor((diff / 1000) % 60);
        
        console.log('\n‚è±Ô∏è  Time Comparison:');
        console.log(`   Expires Timestamp: ${expiresDate.getTime()}`);
        console.log(`   Now Timestamp:     ${now.getTime()}`);
        console.log(`   Difference:        ${diff} ms`);
        console.log(`   Difference:        ${diffMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ ${diffSeconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`);
        console.log(`   Is Expired?        ${expiresDate.getTime() < now.getTime() ? '‚úÖ YES (EXPIRED)' : '‚ùå NO (VALID)'}`);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ MySQL ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô local time ‡∏´‡∏£‡∏∑‡∏≠ UTC
        console.log('\nüåç Timezone Analysis:');
        const [timeRows] = await promisePool.query('SELECT NOW() as db_now, UTC_TIMESTAMP() as db_utc');
        console.log(`   MySQL NOW():           ${timeRows[0].db_now}`);
        console.log(`   MySQL UTC_TIMESTAMP(): ${timeRows[0].db_utc}`);
        console.log(`   Node.js Local:         ${now}`);
        console.log(`   Node.js UTC:           ${now.toISOString()}`);
        
        // ‡∏î‡∏π‡∏ß‡πà‡∏≤ reset_otp_expires ‡πÄ‡∏õ‡πá‡∏ô UTC ‡∏´‡∏£‡∏∑‡∏≠ Local
        const mysqlExpires = user.reset_otp_expires;
        if (mysqlExpires instanceof Date) {
            console.log(`\n   MySQL returned Date object: ${mysqlExpires}`);
        } else {
            console.log(`\n   MySQL returned string: ${mysqlExpires}`);
            // ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô UTC
            const expiresUTC = new Date(mysqlExpires + 'Z');
            console.log(`   If treated as UTC: ${expiresUTC.toISOString()}`);
            const diffUTC = expiresUTC.getTime() - now.getTime();
            console.log(`   Difference if UTC: ${Math.floor(diffUTC / 1000 / 60)} ‡∏ô‡∏≤‡∏ó‡∏µ`);
        }
        
        console.log('\n‚ïê'.repeat(80));
        
    } catch (error) {
        console.error('‚ùå Error:', error.message);
    } finally {
        process.exit(0);
    }
}

debugOTPVerify();
