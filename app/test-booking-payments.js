/**
 * Test script ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• booking_payments
 */

const pool = require('./db');

async function testBookingPaymentsInsert() {
    try {
        console.log('üß™ Testing booking_payments insert...');

        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        const testData = {
            booking_id: 1, // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
            amount: 500.00,
            method: 'stripe',
            status: 'paid',
            transaction_id: 'test_txn_123456',
            stripe_payment_intent_id: 'pi_test_123456'
        };

        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö INSERT
        const [result] = await pool.query(`
            INSERT INTO booking_payments 
            (booking_id, amount, method, status, transaction_id, payment_date, stripe_payment_intent_id) 
            VALUES (?, ?, ?, ?, ?, NOW(), ?)
        `, [
            testData.booking_id,
            testData.amount,
            testData.method,
            testData.status,
            testData.transaction_id,
            testData.stripe_payment_intent_id
        ]);

        console.log('‚úÖ Test insert successful! Insert ID:', result.insertId);

        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö SELECT
        const [rows] = await pool.query(`
            SELECT * FROM booking_payments WHERE payment_id = ?
        `, [result.insertId]);

        console.log('üìã Inserted data:', rows[0]);

        // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        await pool.query(`
            DELETE FROM booking_payments WHERE payment_id = ?
        `, [result.insertId]);

        console.log('üóëÔ∏è Test data cleaned up');

    } catch (error) {
        console.error('‚ùå Test failed:', error.message);
        
        if (error.code === 'ER_NO_REFERENCED_ROW_2') {
            console.log('üí° Error: ‡πÑ‡∏°‡πà‡∏°‡∏µ booking_id ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô booking_id ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á');
        }
    }
}

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
async function testDatabaseConnection() {
    try {
        console.log('üîå Testing database connection...');
        const [rows] = await pool.query('SELECT 1 as test');
        console.log('‚úÖ Database connection OK');
    } catch (error) {
        console.error('‚ùå Database connection failed:', error.message);
    }
}

// ‡∏£‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö
async function runTests() {
    await testDatabaseConnection();
    await testBookingPaymentsInsert();
    process.exit(0);
}

runTests();