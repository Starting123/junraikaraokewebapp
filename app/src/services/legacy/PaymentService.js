const { stripe, stripeConfig } = require('../../config/stripe');
const pool = require('../../utils/LegacyDb');
const SimpleReceiptService = require('../SimpleReceiptService');

class LegacyPaymentService {
    
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á Payment Intent ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô (Legacy version)
     */
    static async createPaymentIntent(bookingId, userId) {
        try {
            if (!stripe) {
                throw new Error('Stripe ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏° STRIPE_SECRET_KEY ‡πÉ‡∏ô environment variables');
            }

            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
            const [bookingRows] = await pool.query(`
                SELECT b.*, r.name as room_name, rt.type_name, rt.price_per_hour
                FROM bookings b 
                JOIN rooms r ON b.room_id = r.room_id 
                JOIN room_types rt ON r.type_id = rt.type_id 
                WHERE b.booking_id = ? AND b.user_id = ?
            `, [bookingId, userId]);

            if (bookingRows.length === 0) {
                throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á');
            }

            const booking = bookingRows[0];
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
            if (booking.payment_status === 'paid') {
                throw new Error('‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
            }

            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏à‡∏≤‡∏Å total_price ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
            let amount = Math.round(parseFloat(booking.total_price) * 100); // Convert to satang
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö THB = 2000 ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå = 20 ‡∏ö‡∏≤‡∏ó)
            const minimumAmount = stripeConfig.currency === 'thb' ? 2000 : 50; // 20 THB ‡∏´‡∏£‡∏∑‡∏≠ 0.50 USD
            if (amount < minimumAmount) {
                amount = minimumAmount;
            }

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á Payment Intent
            const paymentIntent = await stripe.paymentIntents.create({
                amount: amount,
                currency: stripeConfig.currency,
                automatic_payment_methods: {
                    enabled: true,
                },
                metadata: {
                    booking_id: bookingId.toString(),
                    user_id: userId.toString(),
                    room_name: booking.room_name || '',
                    room_type: booking.type_name || ''
                },
                description: `‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á ${booking.room_name} - ${booking.type_name}`
            });

            return {
                success: true,
                clientSecret: paymentIntent.client_secret,
                paymentIntentId: paymentIntent.id,
                amount: amount,
                currency: stripeConfig.currency,
                booking: {
                    id: booking.booking_id,
                    room_name: booking.room_name,
                    type_name: booking.type_name,
                    start_time: booking.start_time,
                    end_time: booking.end_time,
                    total_price: booking.total_price
                }
            };

        } catch (error) {
            console.error('Legacy Payment Service - Error creating payment intent:', error);
            throw error;
        }
    }

    /**
     * ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô (Legacy version)
     */
    static async confirmPayment(paymentIntentId, bookingId, userId) {
        try {
            if (!stripe) {
                throw new Error('Stripe ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏° STRIPE_SECRET_KEY ‡πÉ‡∏ô environment variables');
            }

            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Payment Intent ‡∏à‡∏≤‡∏Å Stripe
            const paymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId);
            
            if (!paymentIntent) {
                throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö Payment Intent');
            }

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
            if (paymentIntent.status !== 'succeeded') {
                throw new Error(`‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${paymentIntent.status})`);
            }

            console.log('üí∞ Starting payment confirmation for booking:', bookingId);
            console.log('üí≥ Payment Intent Amount:', paymentIntent.amount, 'cents');

            // ‡πÄ‡∏£‡∏¥‡πà‡∏° transaction
            await pool.query('START TRANSACTION');

            try {
                // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô booking_payments ‡∏Å‡πà‡∏≠‡∏ô
                const [paymentResult] = await pool.query(`
                    INSERT INTO booking_payments 
                    (booking_id, amount, method, status, transaction_id, payment_date, stripe_payment_intent_id) 
                    VALUES (?, ?, 'stripe', 'paid', ?, NOW(), ?)
                `, [
                    bookingId, 
                    paymentIntent.amount / 100, // Convert from cents to baht
                    paymentIntent.id,
                    paymentIntentId
                ]);

                console.log('‚úÖ Inserted booking_payments record ID:', paymentResult.insertId);

                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                const [updateResult] = await pool.query(`
                    UPDATE bookings 
                    SET payment_status = 'paid'
                    WHERE booking_id = ? AND user_id = ?
                `, [bookingId, userId]);

                if (updateResult.affectedRows === 0) {
                    throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏î‡πâ');
                }

                console.log('‚úÖ Updated booking status to paid');

                // Commit transaction
                await pool.query('COMMIT');

            } catch (transactionError) {
                // Rollback transaction on error
                await pool.query('ROLLBACK');
                console.error('‚ùå Transaction failed, rolled back:', transactionError);
                throw transactionError;
            }

            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
            const [bookingRows] = await pool.query(`
                SELECT b.*, r.name as room_name, rt.type_name
                FROM bookings b 
                JOIN rooms r ON b.room_id = r.room_id 
                JOIN room_types rt ON r.type_id = rt.type_id 
                WHERE b.booking_id = ?
            `, [bookingId]);

            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            const [userRows] = await pool.query(`
                SELECT user_id, name, email FROM users WHERE user_id = ?
            `, [userId]);

            const booking = bookingRows[0];
            const user = userRows[0];

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à PDF
            let receipt = null;
            try {
                const receiptNumber = SimpleReceiptService.generateReceiptNumber();
                
                // ‡πÉ‡∏ä‡πâ SimpleReceiptService ‡πÅ‡∏ó‡∏ô (‡∏ï‡∏≤‡∏°‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)
                receipt = await SimpleReceiptService.generateSimpleReceipt({
                    booking: booking,
                    user: user,
                    payment: {
                        paymentIntentId: paymentIntent.id,
                        status: paymentIntent.status,
                        amount: paymentIntent.amount
                    },
                    receiptNumber: receiptNumber
                });
                
                console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', receipt.fileName);
                console.log('üìù ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢:', receipt.thaiSupport ? '‡πÉ‡∏ä‡πà' : '‡πÑ‡∏°‡πà');
                
                // ‡πÄ‡∏û‡∏¥‡πà‡∏° URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î (SimpleReceiptService ‡∏™‡πà‡∏á‡∏°‡∏≤‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡πâ‡∏ß)
                receipt.directUrl = receipt.downloadUrl;
                
                // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                try {
                    await pool.query(`
                        UPDATE bookings 
                        SET receipt_path = ?, 
                            receipt_filename = ?, 
                            receipt_number = ?, 
                            receipt_created_at = NOW()
                        WHERE booking_id = ?
                    `, [receipt.filePath, receipt.fileName, receiptNumber, bookingId]);
                    
                    console.log('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                } catch (dbError) {
                    console.error('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', dbError.message);
                    // ‡πÑ‡∏ü‡∏•‡πå PDF ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏à‡∏∂‡∏á‡πÑ‡∏°‡πà throw error
                }
                
            } catch (receiptError) {
                console.error('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÑ‡∏î‡πâ:', receiptError.message);
                // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
            }

            return {
                success: true,
                message: '‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
                booking: booking,
                user: user,
                paymentIntent: {
                    id: paymentIntent.id,
                    status: paymentIntent.status,
                    amount: paymentIntent.amount
                },
                receipt: receipt // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
            };

        } catch (error) {
            console.error('Legacy Payment Service - Error confirming payment:', error);
            throw error;
        }
    }

    /**
     * ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô (Legacy version)
     */
    static async cancelPayment(paymentIntentId, bookingId, userId) {
        try {
            if (!stripe) {
                throw new Error('Stripe ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤');
            }

            // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Payment Intent ‡πÉ‡∏ô Stripe
            const paymentIntent = await stripe.paymentIntents.cancel(paymentIntentId);
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            const [updateResult] = await pool.query(`
                UPDATE bookings 
                SET payment_status = 'cancelled', updated_at = NOW()
                WHERE booking_id = ? AND user_id = ?
            `, [bookingId, userId]);

            return {
                success: true,
                message: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
                paymentIntent: paymentIntent
            };

        } catch (error) {
            console.error('Error cancelling payment:', error);
            throw error;
        }
    }

    /**
     * ‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (Legacy version)
     */
    static async refundPayment(paymentIntentId, amount, reason) {
        try {
            if (!stripe) {
                throw new Error('Stripe ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤');
            }

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á refund ‡πÉ‡∏ô Stripe
            const refund = await stripe.refunds.create({
                payment_intent: paymentIntentId,
                amount: amount,
                reason: reason || 'requested_by_customer'
            });

            return {
                success: true,
                message: '‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
                refund: refund
            };

        } catch (error) {
            console.error('Error processing refund:', error);
            throw error;
        }
    }

    /**
     * ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Legacy version)
     */
    static async getUserPayments(userId, limit = 10) {
        try {
            const [paymentRows] = await pool.query(`
                SELECT 
                    b.booking_id,
                    b.payment_status,
                    b.total_price,
                    b.start_time,
                    b.end_time,
                    b.created_at,
                    r.name as room_name,
                    rt.type_name
                FROM bookings b 
                JOIN rooms r ON b.room_id = r.room_id 
                JOIN room_types rt ON r.type_id = rt.type_id 
                WHERE b.user_id = ? AND b.payment_status IS NOT NULL
                ORDER BY b.created_at DESC
                LIMIT ?
            `, [userId, limit]);

            return {
                success: true,
                payments: paymentRows
            };

        } catch (error) {
            console.error('Error fetching user payments:', error);
            throw error;
        }
    }

    /**
     * ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô Stripe)
     * ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î, ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô, QR Code
     */
    static async processDirectPayment(bookingId, method = 'cash', transactionId = null, userId = null) {
        try {
            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
            const [bookingRows] = await pool.query(`
                SELECT b.*, r.name as room_name, rt.type_name, rt.price_per_hour
                FROM bookings b 
                JOIN rooms r ON b.room_id = r.room_id 
                JOIN room_types rt ON r.type_id = rt.type_id 
                WHERE b.booking_id = ?
            `, [bookingId]);

            if (bookingRows.length === 0) {
                throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á');
            }

            const booking = bookingRows[0];
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
            if (booking.payment_status === 'paid') {
                throw new Error('‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
            }

            // ‡πÄ‡∏£‡∏¥‡πà‡∏° transaction
            await pool.query('START TRANSACTION');

            try {
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á payment record
                const [paymentResult] = await pool.query(`
                    INSERT INTO booking_payments 
                    (booking_id, amount, method, status, transaction_id, payment_date) 
                    VALUES (?,?,?,?,?,NOW())
                `, [bookingId, booking.total_price, method, 'completed', transactionId]);

                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
                const [updateResult] = await pool.query(`
                    UPDATE bookings SET payment_status = 'paid' WHERE booking_id = ?
                `, [bookingId]);

                // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                const [userRows] = await pool.query(`
                    SELECT user_id, name, email FROM users WHERE user_id = ?
                `, [userId || booking.user_id]);

                const user = userRows[0] || { user_id: booking.user_id, name: '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤', email: '' };

                // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à PDF
                let receipt = null;
                try {
                    const receiptNumber = SimpleReceiptService.generateReceiptNumber();
                    
                    receipt = await SimpleReceiptService.generateSimpleReceipt({
                        booking: booking,
                        user: user,
                        payment: {
                            method: method,
                            transaction_id: transactionId,
                            amount: booking.total_price,
                            payment_date: new Date()
                        },
                        receiptNumber: receiptNumber
                    });
                    
                    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    await pool.query(`
                        UPDATE bookings 
                        SET receipt_path = ?, receipt_filename = ?, receipt_number = ?, receipt_created_at = NOW()
                        WHERE booking_id = ?
                    `, [receipt.filePath, receipt.fileName, receiptNumber, bookingId]);
                    
                    console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', receipt.fileName);
                    
                } catch (receiptError) {
                    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à:', receiptError);
                    // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
                }

                // Commit transaction
                await pool.query('COMMIT');

                return {
                    success: true,
                    payment: {
                        payment_id: paymentResult.insertId,
                        booking_id: bookingId,
                        amount: booking.total_price,
                        method: method,
                        status: 'completed',
                        transaction_id: transactionId
                    },
                    receipt: receipt
                };

            } catch (error) {
                await pool.query('ROLLBACK');
                throw error;
            }

        } catch (error) {
            console.error('Error processing direct payment:', error);
            throw error;
        }
    }
}

module.exports = LegacyPaymentService;