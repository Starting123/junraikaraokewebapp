const PDFDocument = require('pdfkit');
const moment = require('moment');
const path = require('path');
const fs = require('fs');

moment.locale('th');

/**
 * SimpleReceiptService - ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡∏ï‡∏≤‡∏°‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
 */
class SimpleReceiptService {
    
    static async generateSimpleReceipt(receiptData) {
        try {
            const { booking, user, payment, receiptNumber } = receiptData;
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ö‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏° user_id ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏≤‡∏á‡πà‡∏≤‡∏¢
            const userId = user.user_id || user.id || 'UNKNOWN';
            const fileName = `receipt_${receiptNumber}_U${userId}_${moment().format('YYYYMMDD_HHmmss')}.pdf`;
            const receiptsDir = path.join(__dirname, '../../public/receipts');
            
            if (!fs.existsSync(receiptsDir)) {
                fs.mkdirSync(receiptsDir, { recursive: true });
            }
            
            const filePath = path.join(receiptsDir, fileName);

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF Document ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
            const doc = new PDFDocument({
                size: 'A4',
                margin: 50,
            });
            
            doc.pipe(fs.createWriteStream(filePath));

            // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå assets/fonts
            let thaiFont = 'Helvetica';
            let hasThaiFont = false;
            
            // path ‡πÑ‡∏õ‡∏¢‡∏±‡∏á fonts ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß
            const appRoot = path.join(__dirname, '..', '..');
            
            // ‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢‡πÉ‡∏ô assets/fonts ‡πÅ‡∏•‡∏∞ fallback ‡πÉ‡∏ô Windows
            const thaiFontPaths = [
                path.join(appRoot, 'assets', 'fonts', 'THSarabun.ttf'),
                path.join(appRoot, 'assets', 'fonts', 'THSarabun Bold.ttf'),
                'C:\\Windows\\Fonts\\tahoma.ttf',
                'C:\\Windows\\Fonts\\arial.ttf',
                'C:\\Windows\\Fonts\\cordia.ttf'
            ];
            
            console.log(`üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢‡∏à‡∏≤‡∏Å: ${appRoot}/assets/fonts/`);
            
            // ‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á regular ‡πÅ‡∏•‡∏∞ bold
            let fontLoaded = false;
            
            // ‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î THSarabun Regular
            const regularFont = path.join(appRoot, 'assets', 'fonts', 'THSarabun.ttf');
            if (fs.existsSync(regularFont)) {
                try {
                    doc.registerFont('THSarabun', regularFont);
                    thaiFont = 'THSarabun';
                    fontLoaded = true;
                    console.log(`‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢‡∏õ‡∏Å‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${regularFont}`);
                } catch (e) {
                    console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏õ‡∏Å‡∏ï‡∏¥: ${e.message}`);
                }
            }
            
            // ‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î THSarabun Bold
            const boldFont = path.join(appRoot, 'assets', 'fonts', 'THSarabun Bold.ttf');
            if (fs.existsSync(boldFont)) {
                try {
                    doc.registerFont('THSarabun-Bold', boldFont);
                    console.log(`‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢‡∏´‡∏ô‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${boldFont}`);
                } catch (e) {
                    console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏´‡∏ô‡∏≤: ${e.message}`);
                }
            }
            
            // ‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‡∏•‡∏≠‡∏á fallback
            if (!fontLoaded) {
                for (const fontPath of thaiFontPaths.slice(2)) { // ‡∏Ç‡πâ‡∏≤‡∏° 2 ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏•‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
                    try {
                        if (fs.existsSync(fontPath)) {
                            doc.registerFont('THSarabun', fontPath);
                            thaiFont = 'THSarabun';
                            hasThaiFont = true;
                            console.log(`‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå fallback ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${fontPath}`);
                            break;
                        }
                    } catch (e) {
                        console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î fallback: ${fontPath} - ${e.message}`);
                    }
                }
            } else {
                hasThaiFont = true;
            }
            
            if (!hasThaiFont) {
                console.log('üîß ‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå Helvetica (‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢)');
            }

            // Header - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ï‡∏≤‡∏°‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)
            doc.font(thaiFont);
            doc.fontSize(18);
            doc.text('Jun Rai Karaoke', { align: 'center' });
            
            // ‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ó‡∏¢
            doc.font(thaiFont);
            doc.fontSize(16);
            doc.text('‡∏´‡πâ‡∏≠‡∏á‡∏Ñ‡∏≤‡∏£‡∏≤‡πÇ‡∏≠‡πÄ‡∏Å‡∏∞‡∏à‡∏±‡∏ô‡πÑ‡∏£', { align: 'center' });
            
            doc.fontSize(12);
            doc.text('39 ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 1 ‡∏ñ‡∏ô‡∏ô‡∏£‡∏±‡∏á‡∏™‡∏¥‡∏ï - ‡∏ô‡∏Ñ‡∏£‡∏ô‡∏≤‡∏¢‡∏Å ‡∏ï‡∏≥‡∏ö‡∏• ‡∏Ñ‡∏•‡∏≠‡∏á‡∏´‡∏Å ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏Ñ‡∏•‡∏≠‡∏á‡∏´‡∏•‡∏ß‡∏á ‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ 12110', { align: 'center' });
            doc.text('‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå: 02-123-4567 | LINE: @junraikaraoke', { align: 'center' });
            doc.text('‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ: 0123456789012', { align: 'center' });
            
            doc.moveDown(2);
            
            // ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
            doc.fontSize(20).font(thaiFont);
            doc.text('‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô / Receipt', { align: 'center', underline: true });
            doc.fontSize(16);
            doc.text(`‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà ${receiptNumber}`, { align: 'center' });

            doc.moveDown(1.5);

            // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
            doc.font(thaiFont);
            doc.fontSize(14);
            doc.text(`‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${user.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
            doc.text(`‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ${user.email || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
            doc.text(`‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à: ${moment().format('DD/MM/YYYY ‡πÄ‡∏ß‡∏•‡∏≤ HH:mm:ss ‡∏ô.')}`);
            
            if (booking.booking_date) {
                doc.text(`‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á: ${moment(booking.booking_date).format('DD/MM/YYYY')}`);
            }

            doc.moveDown();

            // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
            doc.fontSize(16).text('‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', { underline: true });
            
            // ‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á
            const tableTop = 270;
            doc.fontSize(16);
            doc.text('‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£', 100, tableTop, { width: 200, align: 'left' });
            doc.text('‡∏´‡πâ‡∏≠‡∏á', 200, tableTop, { width: 100, align: 'center' });
            doc.text('‡πÄ‡∏ß‡∏•‡∏≤', 300, tableTop, { width: 100, align: 'center' });
            doc.text('‡∏£‡∏≤‡∏Ñ‡∏≤', 400, tableTop, { width: 100, align: 'right' });

            // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
            const itemY = tableTop + 30;
            doc.fontSize(14);
            doc.text('‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏Ñ‡∏≤‡∏£‡∏≤‡πÇ‡∏≠‡πÄ‡∏Å‡∏∞', 100, itemY, { width: 200, align: 'left' });
            doc.text(booking.room_name || '‡∏´‡πâ‡∏≠‡∏á VIP', 200, itemY, { width: 100, align: 'center' });
            doc.text(`${booking.duration_hours || 1} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`, 300, itemY, { width: 100, align: 'center' });
            doc.text(`${booking.total_price || 0} ‡∏ö‡∏≤‡∏ó`, 400, itemY, { width: 100, align: 'right' });

            // ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
            doc.moveDown(3);
            doc.fontSize(18);
            doc.text(`‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: ${booking.total_price || 0} ‡∏ö‡∏≤‡∏ó`, 400, doc.y, { 
                width: 100, 
                align: 'right' 
            });

            // Footer
            doc.moveDown(2);
            doc.fontSize(14);
            doc.text('*** ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ***', { align: 'center' });
            doc.text('JUNRAI KARAOKE', { align: 'center' });

            doc.end();

            console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', fileName);

            return {
                success: true,
                fileName: fileName,
                filePath: filePath,
                downloadUrl: `/receipts/${fileName}`,
                receiptNumber: receiptNumber,
                thaiSupport: hasThaiFont
            };

        } catch (error) {
            console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à:', error);
            throw error;
        }
    }

    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô services ‡∏≠‡∏∑‡πà‡∏ô‡πÜ)
     */
    static generateReceiptNumber() {
        const now = moment();
        const timestamp = now.format('YYYYMMDDHHmmss');
        const random = Math.floor(Math.random() * 1000);
        return `RC${timestamp}${random.toString().padStart(3, '0')}`;
    }

    /**
     * ‡∏î‡∏∂‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
     */
    static getReceiptUrl(fileName) {
        return `/receipts/${fileName}`;
    }
}

module.exports = SimpleReceiptService;